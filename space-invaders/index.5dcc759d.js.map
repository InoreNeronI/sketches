{"mappings":"ACgBA,MAAM,EAAS,SAAS,aAAa,CAAC,SAuBtC,SAAS,IACP,aAAa,EAAO,WAAW,CAAE,EAAO,YAAY,CACtD,CAxBA,SAAS,aAAa,CAAC,WAAW,gBAAgB,CAAC,QAAS,IAAM,WAAW,EAAqB","sources":["<anon>","src/space-invaders/index.js"],"sourcesContent":["/*\n   Copyright 2023 barqawiz\n\n   Licensed under the Apache License, Version 2.0 (the 'License');\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an 'AS IS' BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/ let game;\nconst parent = document.querySelector(\".main\");\ndocument.querySelector(\".screen\").addEventListener(\"click\", ()=>setTimeout(windowResizeHandler, 5));\nfunction preload() {\n    game = new Game();\n    game.spaceImg = loadImage(\"../assets/space-invaders/spaceship.png\");\n    game.enemyImg = loadImage(\"../assets/space-invaders/alien2.png\");\n    game.fontRegular = loadFont(\"../assets/Creepster-Regular.ttf\");\n}\nfunction setup() {\n    const CANVAS = createCanvas(parent.offsetWidth, parent.offsetHeight);\n    CANVAS.parent(\"SpaceInvaders\");\n    translate(width / 2, height / 2);\n    game.setup();\n    textFont(game.fontRegular);\n}\nfunction windowResized() {\n    windowResizeHandler();\n}\n// @see https://stackoverflow.com/a/51600005\nfunction windowResizeHandler() {\n    resizeCanvas(parent.offsetWidth, parent.offsetHeight);\n}\nfunction draw() {\n    background(0);\n    strokeWeight(1);\n    if (game.gameOver) {\n        textAlign(CENTER);\n        fill(255);\n        textSize(32);\n        if (game.gameWin) text(\"Winner\", width / 2, height / 2);\n        else text(\"Game Over\", width / 2, height / 2);\n        text(\"Score: \" + game.score, width / 2, height / 2 + 40);\n        if (!game.retryButtonVisible) {\n            game.retryButton.show();\n            game.retryButtonVisible = true;\n        }\n        return;\n    }\n    game.player.show();\n    game.player.move();\n    for(let i = 0; i < game.enemies.length; i++){\n        game.enemies[i].show();\n        game.enemies[i].move();\n    }\n    for(let i = 0; i < game.playerProjectiles.length; i++){\n        game.playerProjectiles[i].show();\n        game.playerProjectiles[i].move();\n        for(let j = 0; j < game.enemies.length; j++)if (game.playerProjectiles[i].hit(game.enemies[j])) {\n            game.killedEnemies++;\n            game.score++;\n            game.enemies.splice(j, 1);\n            game.playerProjectiles.splice(i, 1);\n            i--;\n            break;\n        }\n    }\n    for(let i = 0; i < game.enemyProjectiles.length; i++){\n        game.enemyProjectiles[i].show();\n        game.enemyProjectiles[i].move();\n        if (game.enemyProjectiles[i].hit(game.player)) game.gameOver = true;\n    }\n    if (game.enemies.length === 0) {\n        game.gameOver = true;\n        game.gameWin = true;\n    }\n    game.updateKilledText();\n    game.drawStars();\n}\nfunction keyPressed() {\n    if (key === \" \") game.playerProjectiles.push(new Projectile(game.player.x, game.player.y, -1));\n}\nclass Game {\n    constructor(){\n        this.player;\n        this.enemies = [];\n        this.playerProjectiles = [];\n        this.enemyProjectiles = [];\n        this.gameOver = false;\n        this.gameWin = false;\n        this.score = 0;\n        this.retryButton = createButton(\"Retry\");\n        this.retryButtonVisible = false;\n        // images\n        this.spaceImg;\n        this.enemyImg;\n        // counter\n        this.killedEnemies = 0;\n        // star variables\n        this.starX = [];\n        this.starY = [];\n        this.starSpeed = [];\n    }\n    setup() {\n        this.retryButton.position(width / 2 - 20, height / 2 + 80);\n        this.retryButton.mousePressed(()=>{\n            this.resetGame();\n        });\n        this.resetGame();\n    }\n    resetGame() {\n        this.killedEnemies = 0;\n        this.gameOver = false;\n        this.gameWin = false;\n        this.score = 0;\n        this.retryButtonVisible = false;\n        this.retryButton.hide();\n        this.player = new Player();\n        this.enemies = [];\n        this.initEnemies();\n        this.playerProjectiles = [];\n        this.enemyProjectiles = [];\n        // stars reset\n        this.starX = [];\n        this.starY = [];\n        this.starSpeed = [];\n    }\n    initEnemies() {\n        for(let i = 0; i < 5; i++)for(let j = 0; j < 10; j++)this.enemies.push(new Enemy(j * 60 + 60, i * 40 + 80));\n    }\n    drawStars() {\n        for(var i = 0; i < 50; i++){\n            stroke(255);\n            strokeWeight(random(1, 4));\n            if (!this.starX[i]) {\n                this.starX[i] = random(width);\n                this.starY[i] = random(height);\n                this.starSpeed[i] = random(1, 2);\n            } else {\n                this.starY[i] -= this.starSpeed[i];\n                if (this.starY[i] < 0) {\n                    this.starX[i] = random(width);\n                    this.starY[i] = height;\n                }\n            }\n            point(this.starX[i], this.starY[i]);\n        }\n    }\n    updateKilledText() {\n        textAlign(CENTER);\n        strokeWeight(0.5);\n        fill(255);\n        textSize(12);\n        text(\"Killed Enemies: \" + this.killedEnemies, 80, 30);\n    }\n}\nclass Player {\n    constructor(){\n        this.x = width / 2;\n        this.y = height - 70;\n        this.w = 50;\n        this.h = 50;\n    }\n    show() {\n        image(game.spaceImg, this.x, this.y, this.w, this.h);\n    }\n    move() {\n        if (keyIsDown(LEFT_ARROW) && this.x > 0) this.x -= 5;\n        if (keyIsDown(RIGHT_ARROW) && this.x < width - this.w) this.x += 5;\n    }\n}\nclass Enemy {\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n        this.w = 50;\n        this.h = 50;\n        this.speed = 1;\n        this.direction = 1;\n    }\n    show() {\n        image(game.enemyImg, this.x, this.y, this.w, this.h);\n    //rect(this.x, this.y, this.w, this.h);\n    }\n    move() {\n        this.x += this.speed * this.direction;\n        if (this.x > width - this.w || this.x < 0) {\n            this.direction *= -1;\n            this.y += 10;\n        }\n        if (random(1) < 0.001) game.enemyProjectiles.push(new Projectile(this.x + this.w / 2, this.y + this.h, 1));\n    }\n}\nclass Projectile {\n    constructor(x, y, direction){\n        this.x = x;\n        this.y = y;\n        this.r = 10;\n        this.speed = 5;\n        this.direction = direction;\n    }\n    show() {\n        ellipse(this.x, this.y, this.r * 2);\n    }\n    move() {\n        this.y += this.speed * this.direction;\n    }\n    hit(obj) {\n        let d = dist(this.x, this.y, obj.x + obj.w / 2, obj.y + obj.h / 2);\n        return d < this.r + obj.w / 2;\n    }\n}\n\n//# sourceMappingURL=index.5dcc759d.js.map\n","/*\n   Copyright 2023 barqawiz\n\n   Licensed under the Apache License, Version 2.0 (the 'License');\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an 'AS IS' BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nlet game;\nconst parent = document.querySelector('.main');\ndocument.querySelector('.screen').addEventListener('click', () => setTimeout(windowResizeHandler, 5));\n\nfunction preload() {\n  game = new Game();\n  game.spaceImg = loadImage('../assets/space-invaders/spaceship.png');\n  game.enemyImg = loadImage('../assets/space-invaders/alien2.png');\n  game.fontRegular = loadFont('../assets/Creepster-Regular.ttf');\n}\n\nfunction setup() {\n  const CANVAS = createCanvas(parent.offsetWidth, parent.offsetHeight);\n  CANVAS.parent('SpaceInvaders');\n  translate(width / 2, height / 2);\n  game.setup();\n  textFont(game.fontRegular);\n}\n\nfunction windowResized() {\n  windowResizeHandler();\n}\n\n// @see https://stackoverflow.com/a/51600005\nfunction windowResizeHandler() {\n  resizeCanvas(parent.offsetWidth, parent.offsetHeight);\n}\n\nfunction draw() {\n  background(0);\n  strokeWeight(1);\n\n  if (game.gameOver) {\n    textAlign(CENTER);\n    fill(255);\n    textSize(32);\n    if (game.gameWin) text('Winner', width / 2, height / 2);\n    else text('Game Over', width / 2, height / 2);\n    text('Score: ' + game.score, width / 2, height / 2 + 40);\n    if (!game.retryButtonVisible) {\n      game.retryButton.show();\n      game.retryButtonVisible = true;\n    }\n    return;\n  }\n\n  game.player.show();\n  game.player.move();\n\n  for (let i = 0; i < game.enemies.length; i++) {\n    game.enemies[i].show();\n    game.enemies[i].move();\n  }\n\n  for (let i = 0; i < game.playerProjectiles.length; i++) {\n    game.playerProjectiles[i].show();\n    game.playerProjectiles[i].move();\n    for (let j = 0; j < game.enemies.length; j++) {\n      if (game.playerProjectiles[i].hit(game.enemies[j])) {\n        game.killedEnemies++;\n        game.score++;\n        game.enemies.splice(j, 1);\n        game.playerProjectiles.splice(i, 1);\n        i--;\n        break;\n      }\n    }\n  }\n\n  for (let i = 0; i < game.enemyProjectiles.length; i++) {\n    game.enemyProjectiles[i].show();\n    game.enemyProjectiles[i].move();\n    if (game.enemyProjectiles[i].hit(game.player)) {\n      game.gameOver = true;\n    }\n  }\n\n  if (game.enemies.length === 0) {\n    game.gameOver = true;\n    game.gameWin = true;\n  }\n  game.updateKilledText();\n  game.drawStars();\n}\n\nfunction keyPressed() {\n  if (key === ' ') {\n    game.playerProjectiles.push(new Projectile(game.player.x, game.player.y, -1));\n  }\n}\n\nclass Game {\n  constructor() {\n    this.player;\n    this.enemies = [];\n    this.playerProjectiles = [];\n    this.enemyProjectiles = [];\n    this.gameOver = false;\n    this.gameWin = false;\n    this.score = 0;\n    this.retryButton = createButton('Retry');\n    this.retryButtonVisible = false;\n    // images\n    this.spaceImg;\n    this.enemyImg;\n    // counter\n    this.killedEnemies = 0;\n    // star variables\n    this.starX = [];\n    this.starY = [];\n    this.starSpeed = [];\n  }\n\n  setup() {\n    this.retryButton.position(width / 2 - 20, height / 2 + 80);\n    this.retryButton.mousePressed(() => {\n      this.resetGame();\n    });\n    this.resetGame();\n  }\n\n  resetGame() {\n    this.killedEnemies = 0;\n    this.gameOver = false;\n    this.gameWin = false;\n    this.score = 0;\n    this.retryButtonVisible = false;\n    this.retryButton.hide();\n    this.player = new Player();\n    this.enemies = [];\n    this.initEnemies();\n    this.playerProjectiles = [];\n    this.enemyProjectiles = [];\n    // stars reset\n    this.starX = [];\n    this.starY = [];\n    this.starSpeed = [];\n  }\n\n  initEnemies() {\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < 10; j++) {\n        this.enemies.push(new Enemy(j * 60 + 60, i * 40 + 80));\n      }\n    }\n  }\n\n  drawStars() {\n    for (var i = 0; i < 50; i++) {\n      stroke(255);\n      strokeWeight(random(1, 4));\n      if (!this.starX[i]) {\n        this.starX[i] = random(width);\n        this.starY[i] = random(height);\n        this.starSpeed[i] = random(1, 2);\n      } else {\n        this.starY[i] -= this.starSpeed[i];\n        if (this.starY[i] < 0) {\n          this.starX[i] = random(width);\n          this.starY[i] = height;\n        }\n      }\n      point(this.starX[i], this.starY[i]);\n    }\n  }\n\n  updateKilledText() {\n    textAlign(CENTER);\n    strokeWeight(0.5);\n    fill(255);\n    textSize(12);\n    text('Killed Enemies: ' + this.killedEnemies, 80, 30);\n  }\n}\n\nclass Player {\n  constructor() {\n    this.x = width / 2;\n    this.y = height - 70;\n    this.w = 50;\n    this.h = 50;\n  }\n\n  show() {\n    image(game.spaceImg, this.x, this.y, this.w, this.h);\n  }\n\n  move() {\n    if (keyIsDown(LEFT_ARROW) && this.x > 0) {\n      this.x -= 5;\n    }\n    if (keyIsDown(RIGHT_ARROW) && this.x < width - this.w) {\n      this.x += 5;\n    }\n  }\n}\n\nclass Enemy {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.w = 50;\n    this.h = 50;\n    this.speed = 1;\n    this.direction = 1;\n  }\n\n  show() {\n    image(game.enemyImg, this.x, this.y, this.w, this.h);\n    //rect(this.x, this.y, this.w, this.h);\n  }\n\n  move() {\n    this.x += this.speed * this.direction;\n    if (this.x > width - this.w || this.x < 0) {\n      this.direction *= -1;\n      this.y += 10;\n    }\n    if (random(1) < 0.001) {\n      game.enemyProjectiles.push(new Projectile(this.x + this.w / 2, this.y + this.h, 1));\n    }\n  }\n}\n\nclass Projectile {\n  constructor(x, y, direction) {\n    this.x = x;\n    this.y = y;\n    this.r = 10;\n    this.speed = 5;\n    this.direction = direction;\n  }\n\n  show() {\n    ellipse(this.x, this.y, this.r * 2);\n  }\n\n  move() {\n    this.y += this.speed * this.direction;\n  }\n\n  hit(obj) {\n    let d = dist(this.x, this.y, obj.x + obj.w / 2, obj.y + obj.h / 2);\n    return d < this.r + obj.w / 2;\n  }\n}\n"],"names":["parent","document","querySelector","windowResizeHandler","resizeCanvas","offsetWidth","offsetHeight","addEventListener","setTimeout"],"version":3,"file":"index.5dcc759d.js.map"}