{"mappings":"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","sources":["<anon>","src/home/index.ts"],"sourcesContent":["// @see https://codepen.io/72lions/pen/nzdpWz\nclass Particles {\n    constructor(document1){\n        this.QUANTITY = 100;\n        this.PARTICLE_SIZE = 10;\n        this.document = document1;\n        // @see https://stackoverflow.com/a/52620181/16711967\n        this.window = document1.defaultView;\n    }\n    drawParticles(el, container) {\n        const CANVAS = el;\n        if (!!(CANVAS && CANVAS.getContext)) {\n            this.context = CANVAS.getContext(\"2d\");\n            this.context.globalCompositeOperation = \"destination-over\";\n            // @see https://stackoverflow.com/a/51600005\n            // @see https://stackoverflow.com/a/43505254/16711967\n            this.window.addEventListener(\"resize\", this.windowResizeHandler.bind(this), false);\n            // @see https://christiankohler.net/how-to-use-resizeobserver-with-angular\n            const observer = new ResizeObserver((entries)=>entries.forEach(this.windowResizeHandler.bind(this)));\n            this.CONTAINER = container;\n            observer.observe(this.CONTAINER);\n            this.windowResizeHandler();\n            this.createParticles();\n            this.loop();\n        }\n    }\n    windowResizeHandler() {\n        this.context.canvas.width = this.CONTAINER.offsetWidth;\n        this.context.canvas.height = this.CONTAINER.offsetHeight;\n    }\n    createParticles() {\n        this.particles = [];\n        const depth = 0;\n        for(let i = 0; i < this.QUANTITY; i++){\n            const posX = this.PARTICLE_SIZE / 2 + Math.random() * (this.context.canvas.width - this.PARTICLE_SIZE / 2);\n            const posY = this.PARTICLE_SIZE / 2 + Math.random() * (this.context.canvas.offsetHeight - this.PARTICLE_SIZE / 2);\n            const speed = 2;\n            const directionX = -speed + Math.random() * speed * 2;\n            const directionY = -speed + Math.random() * speed * 2;\n            this.particles.push({\n                position: {\n                    x: posX,\n                    y: posY\n                },\n                size: this.PARTICLE_SIZE,\n                directionX,\n                directionY,\n                speed,\n                targetX: posX,\n                targetY: posY,\n                depth,\n                index: i,\n                fillColor: `#${(Math.random() * 0x00eaff + 0xff0000 | 0).toString(16)}`\n            });\n        }\n    }\n    loop() {\n        this.context.fillStyle = \"rgba(248, 249, 250, 0.2)\";\n        this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        let z = 0;\n        let x = 0;\n        let y = 0;\n        let dist = 0;\n        for(let i = 0; i < this.particles.length; i++){\n            const particle = this.particles[i];\n            const lp = {\n                x: particle.position.x,\n                y: particle.position.y\n            };\n            if (particle.position.x <= particle.size / 2 || particle.position.x >= this.context.canvas.width - this.PARTICLE_SIZE / 2) particle.directionX *= -1;\n            if (particle.position.y <= particle.size / 2 || particle.position.y >= this.context.canvas.offsetHeight - this.PARTICLE_SIZE / 2) particle.directionY *= -1;\n            for(let s = 0; s < this.particles.length; s++){\n                const bounceParticle = this.particles[s];\n                if (bounceParticle.index !== particle.index) {\n                    // what are the distances\n                    z = this.PARTICLE_SIZE;\n                    x = Math.abs(bounceParticle.position.x - particle.position.x);\n                    y = Math.abs(bounceParticle.position.y - particle.position.y);\n                    dist = Math.sqrt(x ** 2 + y ** 2);\n                    if (dist < z) {\n                        this.randomiseDirection(particle);\n                        this.randomiseDirection(bounceParticle);\n                    }\n                }\n            }\n            particle.position.x -= particle.directionX;\n            particle.position.y -= particle.directionY;\n            this.context.beginPath();\n            this.context.fillStyle = particle.fillColor;\n            this.context.lineWidth = particle.size;\n            this.context.moveTo(lp.x, lp.y);\n            this.context.arc(particle.position.x, particle.position.y, particle.size / 2, 0, Math.PI * 2, true);\n            this.context.closePath();\n            this.context.fill();\n        }\n        // @see https://stackoverflow.com/a/43505254/16711967\n        this.window.requestAnimationFrame(this.loop.bind(this));\n    }\n    randomiseDirection(particle) {\n        // pick a random deg\n        let d = 0;\n        while(d === 0 || d === 90 || d === 180 || d === 360)d = Math.floor(Math.random() * 360);\n        const r = d * 180 / Math.PI;\n        particle.directionX = Math.sin(r) * particle.speed;\n        particle.directionY = Math.cos(r) * particle.speed;\n    }\n}\ndocument.addEventListener(\"DOMContentLoaded\", (e)=>{\n    const particles = new Particles(e.target);\n    particles.drawParticles(e.target.querySelector(\".canvas-background\"), e.target.querySelector(\".main\"));\n}, false);\n\n//# sourceMappingURL=index.3d7fe41d.js.map\n","// @see https://codepen.io/72lions/pen/nzdpWz\nclass Particles {\n  QUANTITY: number = 100;\n  PARTICLE_SIZE: number = 10;\n  CONTAINER: HTMLElement;\n  context: CanvasRenderingContext2D;\n  particles: Array<any>;\n  document: Document;\n  window: Window;\n\n  constructor(document: Document) {\n    this.document = document;\n    // @see https://stackoverflow.com/a/52620181/16711967\n    this.window = document.defaultView;\n  }\n\n  drawParticles(el: HTMLCanvasElement, container: HTMLElement): void {\n    const CANVAS: HTMLCanvasElement = el;\n    if (!!(CANVAS && CANVAS.getContext)) {\n      this.context = CANVAS.getContext('2d');\n      this.context.globalCompositeOperation = 'destination-over';\n      // @see https://stackoverflow.com/a/51600005\n      // @see https://stackoverflow.com/a/43505254/16711967\n      this.window.addEventListener('resize', this.windowResizeHandler.bind(this), false);\n      // @see https://christiankohler.net/how-to-use-resizeobserver-with-angular\n      const observer: ResizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) =>\n        entries.forEach(this.windowResizeHandler.bind(this)),\n      );\n      this.CONTAINER = container;\n      observer.observe(this.CONTAINER);\n      this.windowResizeHandler();\n      this.createParticles();\n      this.loop();\n    }\n  }\n\n  windowResizeHandler(): void {\n    this.context.canvas.width = this.CONTAINER.offsetWidth;\n    this.context.canvas.height = this.CONTAINER.offsetHeight;\n  }\n\n  createParticles(): void {\n    this.particles = [];\n    const depth = 0;\n\n    for (let i: number = 0; i < this.QUANTITY; i++) {\n      const posX: number = this.PARTICLE_SIZE / 2 + Math.random() * (this.context.canvas.width - this.PARTICLE_SIZE / 2);\n      const posY: number = this.PARTICLE_SIZE / 2 + Math.random() * (this.context.canvas.offsetHeight - this.PARTICLE_SIZE / 2);\n\n      const speed = 2;\n      const directionX: number = -speed + Math.random() * speed * 2;\n      const directionY: number = -speed + Math.random() * speed * 2;\n\n      this.particles.push({\n        position: { x: posX, y: posY },\n        size: this.PARTICLE_SIZE,\n        directionX,\n        directionY,\n        speed,\n        targetX: posX,\n        targetY: posY,\n        depth,\n        index: i,\n        fillColor: `#${((Math.random() * 0x00eaff + 0xff0000) | 0).toString(16)}`,\n      });\n    }\n  }\n\n  loop(): void {\n    this.context.fillStyle = 'rgba(248, 249, 250, 0.2)';\n    this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n\n    let z: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let dist: number = 0;\n\n    for (let i: number = 0; i < this.particles.length; i++) {\n      const particle: any = this.particles[i];\n\n      const lp: { x: number; y: number } = { x: particle.position.x, y: particle.position.y };\n\n      if (particle.position.x <= particle.size / 2 || particle.position.x >= this.context.canvas.width - this.PARTICLE_SIZE / 2) {\n        particle.directionX *= -1;\n      }\n\n      if (particle.position.y <= particle.size / 2 || particle.position.y >= this.context.canvas.offsetHeight - this.PARTICLE_SIZE / 2) {\n        particle.directionY *= -1;\n      }\n\n      for (let s: number = 0; s < this.particles.length; s++) {\n        const bounceParticle = this.particles[s];\n        if (bounceParticle.index !== particle.index) {\n          // what are the distances\n          z = this.PARTICLE_SIZE;\n          x = Math.abs(bounceParticle.position.x - particle.position.x);\n          y = Math.abs(bounceParticle.position.y - particle.position.y);\n          dist = Math.sqrt(x ** 2 + y ** 2);\n          if (dist < z) {\n            this.randomiseDirection(particle);\n            this.randomiseDirection(bounceParticle);\n          }\n        }\n      }\n\n      particle.position.x -= particle.directionX;\n      particle.position.y -= particle.directionY;\n\n      this.context.beginPath();\n      this.context.fillStyle = particle.fillColor;\n      this.context.lineWidth = particle.size;\n      this.context.moveTo(lp.x, lp.y);\n      this.context.arc(particle.position.x, particle.position.y, particle.size / 2, 0, Math.PI * 2, true);\n      this.context.closePath();\n      this.context.fill();\n    }\n\n    // @see https://stackoverflow.com/a/43505254/16711967\n    this.window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  randomiseDirection(particle: any): void {\n    // pick a random deg\n    let d: number = 0;\n    while (d === 0 || d === 90 || d === 180 || d === 360) {\n      d = Math.floor(Math.random() * 360);\n    }\n\n    const r: number = (d * 180) / Math.PI;\n    particle.directionX = Math.sin(r) * particle.speed;\n    particle.directionY = Math.cos(r) * particle.speed;\n  }\n}\n\ndocument.addEventListener(\n  'DOMContentLoaded',\n  (e: Event | any): void => {\n    const particles: Particles = new Particles(e.target);\n    particles.drawParticles(e.target.querySelector('.canvas-background'), e.target.querySelector('.main'));\n  },\n  false,\n);\n"],"names":["Particles","constructor","document1","QUANTITY","PARTICLE_SIZE","document","window","defaultView","drawParticles","el","container","CANVAS","getContext","context","globalCompositeOperation","addEventListener","windowResizeHandler","bind","observer","ResizeObserver","entries","forEach","CONTAINER","observe","createParticles","loop","canvas","width","offsetWidth","height","offsetHeight","particles","i","posX","Math","random","posY","directionX","directionY","push","position","x","y","size","speed","targetX","targetY","depth","index","fillColor","toString","fillStyle","fillRect","z","length","particle","lp","s","bounceParticle","sqrt","abs","randomiseDirection","beginPath","lineWidth","moveTo","arc","PI","closePath","fill","requestAnimationFrame","d","floor","r","sin","cos","e","target","querySelector"],"version":3,"file":"index.3d7fe41d.js.map"}