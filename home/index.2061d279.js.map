{"mappings":"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","sources":["src/home/index.ts"],"sourcesContent":["// @see https://codepen.io/72lions/pen/nzdpWz\nclass Particles {\n  QUANTITY: number = 100;\n  PARTICLE_SIZE: number = 10;\n  CONTAINER: HTMLElement;\n  context: CanvasRenderingContext2D;\n  particles: Array<any>;\n  document: Document;\n  window: Window;\n\n  constructor(document: Document) {\n    this.document = document;\n    // @see https://stackoverflow.com/a/52620181/16711967\n    this.window = document.defaultView;\n  }\n\n  drawParticles(el: HTMLCanvasElement, container: HTMLElement): void {\n    const CANVAS: HTMLCanvasElement = el;\n    if (!!(CANVAS && CANVAS.getContext)) {\n      this.context = CANVAS.getContext('2d');\n      this.context.globalCompositeOperation = 'destination-over';\n      // @see https://stackoverflow.com/a/51600005\n      // @see https://stackoverflow.com/a/43505254/16711967\n      this.window.addEventListener('resize', this.windowResizeHandler.bind(this), false);\n      // @see https://christiankohler.net/how-to-use-resizeobserver-with-angular\n      const observer: ResizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) =>\n        entries.forEach(this.windowResizeHandler.bind(this)),\n      );\n      this.CONTAINER = container;\n      observer.observe(this.CONTAINER);\n      this.windowResizeHandler();\n      this.createParticles();\n      this.loop();\n    }\n  }\n\n  windowResizeHandler(): void {\n    this.context.canvas.width = this.CONTAINER.offsetWidth;\n    this.context.canvas.height = this.CONTAINER.offsetHeight;\n  }\n\n  createParticles(): void {\n    this.particles = [];\n    const depth = 0;\n\n    for (let i: number = 0; i < this.QUANTITY; i++) {\n      const posX: number = this.PARTICLE_SIZE / 2 + Math.random() * (this.context.canvas.width - this.PARTICLE_SIZE / 2);\n      const posY: number = this.PARTICLE_SIZE / 2 + Math.random() * (this.context.canvas.offsetHeight - this.PARTICLE_SIZE / 2);\n\n      const speed = 2;\n      const directionX: number = -speed + Math.random() * speed * 2;\n      const directionY: number = -speed + Math.random() * speed * 2;\n\n      this.particles.push({\n        position: { x: posX, y: posY },\n        size: this.PARTICLE_SIZE,\n        directionX,\n        directionY,\n        speed,\n        targetX: posX,\n        targetY: posY,\n        depth,\n        index: i,\n        fillColor: `#${((Math.random() * 0x00eaff + 0xff0000) | 0).toString(16)}`,\n      });\n    }\n  }\n\n  loop(): void {\n    this.context.fillStyle = 'rgba(248, 249, 250, 0.2)';\n    this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n\n    let z: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let dist: number = 0;\n\n    for (let i: number = 0; i < this.particles.length; i++) {\n      const particle: any = this.particles[i];\n\n      const lp: { x: number; y: number } = { x: particle.position.x, y: particle.position.y };\n\n      if (particle.position.x <= particle.size / 2 || particle.position.x >= this.context.canvas.width - this.PARTICLE_SIZE / 2) {\n        particle.directionX *= -1;\n      }\n\n      if (particle.position.y <= particle.size / 2 || particle.position.y >= this.context.canvas.offsetHeight - this.PARTICLE_SIZE / 2) {\n        particle.directionY *= -1;\n      }\n\n      for (let s: number = 0; s < this.particles.length; s++) {\n        const bounceParticle = this.particles[s];\n        if (bounceParticle.index !== particle.index) {\n          // what are the distances\n          z = this.PARTICLE_SIZE;\n          x = Math.abs(bounceParticle.position.x - particle.position.x);\n          y = Math.abs(bounceParticle.position.y - particle.position.y);\n          dist = Math.sqrt(x ** 2 + y ** 2);\n          if (dist < z) {\n            this.randomiseDirection(particle);\n            this.randomiseDirection(bounceParticle);\n          }\n        }\n      }\n\n      particle.position.x -= particle.directionX;\n      particle.position.y -= particle.directionY;\n\n      this.context.beginPath();\n      this.context.fillStyle = particle.fillColor;\n      this.context.lineWidth = particle.size;\n      this.context.moveTo(lp.x, lp.y);\n      this.context.arc(particle.position.x, particle.position.y, particle.size / 2, 0, Math.PI * 2, true);\n      this.context.closePath();\n      this.context.fill();\n    }\n\n    // @see https://stackoverflow.com/a/43505254/16711967\n    this.window.requestAnimationFrame(this.loop.bind(this));\n  }\n\n  randomiseDirection(particle: any): void {\n    // pick a random deg\n    let d: number = 0;\n    while (d === 0 || d === 90 || d === 180 || d === 360) {\n      d = Math.floor(Math.random() * 360);\n    }\n\n    const r: number = (d * 180) / Math.PI;\n    particle.directionX = Math.sin(r) * particle.speed;\n    particle.directionY = Math.cos(r) * particle.speed;\n  }\n}\n\ndocument.addEventListener(\n  'DOMContentLoaded',\n  (e: Event | any): void => {\n    const particles: Particles = new Particles(e.target);\n    particles.drawParticles(e.target.querySelector('.canvas-background'), e.target.querySelector('.main'));\n  },\n  false,\n);\n"],"names":[],"version":3,"file":"index.2061d279.js.map"}