{"mappings":"AAAA;;;;;;;;CAQC,GAED;;CAEC,GACD,oCAAoC;AACpC,8CAA8C;AAC9C,wBAAwB;AAExB,0FAA0F;AAC1F,SAAS,gBAAgB,CAAC,eAAe,CAAC,QAAU,MAAM,cAAc;AAExE,SAAS;AACT,IAAI,KAAK,gDAAgD;AAEzD,MAAM,SAAS;IACb,MAAM;QACJ,MAAM;QACN,OAAO;QACP,MAAM;QACN,YAAY;QACZ,KAAK;QACL,MAAM;IACR;IACA,QAAQ;QACN,MAAM;QACN,OAAO;QACP,MAAM;QACN,YAAY;QACZ,KAAK;QACL,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,OAAO;QACP,MAAM;QACN,YAAY;QACZ,KAAK;QACL,MAAM;IACR;IACA,MAAM;QACJ,MAAM;QACN,OAAO;QACP,MAAM;QACN,YAAY;QACZ,KAAK;QACL,MAAM;IACR;IACA,SAAS;QACP,MAAM;QACN,OAAO;QACP,MAAM;QACN,YAAY;QACZ,KAAK;QACL,MAAM;IACR;IACA,OAAO;QACL,MAAM;QACN,OAAO;QACP,MAAM;QACN,YAAY;QACZ,KAAK;QACL,MAAM;IACR;AACF;AAEA;;CAEC,GACD,IAAI,WAAW,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,gBAAgB;AAE/D;;CAEC,GACD,IAAI,QAAQ,OAAO,YAAY,CAAC,OAAO,CAAC,WAAW;AACnD,OAAO,YAAY,CAAC,OAAO,CAAC,aAAa,MAAM,CAAC,MAAM,CAAC,OAAO;AAE9D,IAAI,YAAY,MAAM,CAAC,MAAM,CAAC,OAAO;AACrC,IAAI,kBAAkB,MAAM,CAAC,MAAM,CAAC,aAAa;AACjD,IAAI,WAAW,MAAM,CAAC,MAAM,CAAC,MAAM;AACnC,IAAI,YAAY,MAAM,CAAC,MAAM,CAAC,OAAO;AAErC,SAAS;AACT,MAAM,SAAS,WAAW,WAAM;AAChC,IAAI,UAAU;IAAC;IAAM;IAAO;IAAO;IAAO;IAAO;IAAO;IAAO;IAAO;CAAM;AAC5E,IAAI,UAAU,OAAO,CAAC,EAAE,GAAG;AAC3B,MAAM,OAAO;AACb,IAAI,aAAa;AACjB,IAAI,OAAO;AACX,MAAM,QAAQ;AACd,IAAI,MAAM;AACV,IAAI,OAAO;AACX,MAAM,QAAQ;AACd,MAAM,QAAQ;AAEd;;CAEC,GACD,OAAO,YAAY,CAAC,OAAO,CAAC,SAAS,MAAM,CAAC,MAAM,CAAC,QAAQ;AAE3D;;CAEC,GACD,IAAI,WAAW;IACb,OAAO;QACL,mCAAmC;QACnC,SAAS;QACT,MAAM;QACN,OAAO;IACT;IACA,MAAM;QACJ,YAAY;IACd;AACF;AAEA;;CAEC,GACD,IAAI,QAAQ,aAAa,OAAO,CAAC;AAEjC,OAAQ;IACN,KAAK;QACH,SAAS,KAAK,GAAG;YACf,SAAS;YACT,MAAM;YACN,OAAO;QACT;QACA;IACF,KAAK;QACH,SAAS,KAAK,GAAG;YACf,SAAS;YACT,MAAM;YACN,OAAO;QACT;QACA;IACF,KAAK;QACH,SAAS,KAAK,GAAG;YACf,SAAS;YACT,MAAM;YACN,OAAO;QACT;QACA;IACF,KAAK;QACH,SAAS,KAAK,GAAG;YACf,SAAS;YACT,MAAM;YACN,OAAO;QACT;QACA;AACJ;AAEA;;CAEC,GACD,IAAI,UAAU,EAAE,EAAE,uCAAuC;AACzD,IAAI,aAAa,SAAS,IAAI,CAAC,UAAU,EAAE,sCAAsC;AACjF,IAAI,UAAU,SAAS,KAAK,CAAC,OAAO,EAAE,qCAAqC;AAC3E,IAAI,OAAO,SAAS,KAAK,CAAC,IAAI,EAAE,kCAAkC;AAClE,IAAI,kBAAkB,OAAO;AAC7B,IAAI,YAAY,aAAa,OAAO,yDAAyD;AAC7F,wDAAwD;AACxD,8CAA8C;AAE9C,IAAI,YAAY;IACd,OAAO,aAAa,UAAU;IAC9B,QAAQ,aAAa,OAAO;AAC9B;AAEA,IAAI,eAAe,SAAS,KAAK,CAAC,KAAK,EAAE,6BAA6B;AACtE,IAAI,gBAAgB,cAAc,qDAAqD;AACvF,IAAI,gBAAgB,GAAG,uCAAuC;AAC9D,IAAI,eAAe,EAAE,EAAE,uFAAuF;AAE9G,IAAI,iBAAiB;AACrB,IAAI,QAAQ,GAAG,kEAAkE;AACjF,IAAI,YAAY,MAAM,yBAAyB;AAC/C,IAAI,eAAe;AACnB,IAAI,eAAe,OAAO,wDAAwD;AAClF,IAAI,cAAc,OAAO,gDAAgD;AAEzE;;CAEC,GACD,SAAS;IACP,MAAO,gBAAgB,EAAG;QACxB,IAAI,eAAe,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;QAC9C,IAAI,CAAC,aAAa,QAAQ,CAAC,eAAe;YACxC,aAAa,IAAI,CAAC;YAClB,iBAAiB;QACnB;IACF;AACF;AAEA,SAAS;IACP,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;QAC7B,IAAI,YAAY,IAAI,OAAO,GAAG,GAAG;QACjC,iBAAiB;QAEjB,qCAAqC;QACrC,IAAI,aAAa,QAAQ,CAAC,UAAU,GAAG,GACrC,UAAU,IAAI,GAAG;QAEnB,QAAQ,IAAI,CAAC;IACf;AAEJ;AAEA,qCAAqC;AACrC,SAAS;IACP,QAAQ,OAAO,CAAC,CAAC;QACf,oCAAoC;QACpC,IAAI,YAAY,aAAa;QAC7B,IAAI,UAAU,CAAC,aAAa,eAAiB,cAAc;QAC3D,EAAE,WAAW,GAAG,UAAU,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,oCAAoC;IACpG;AACF;AAEA,iBAAiB;AACjB,IAAI,aAAa;AACjB,IAAI,YAAY;AAEhB,MAAM,aAAa;IACjB,YAAY;QACV,IAAI,WACF;QAEF,cAAc;IAChB,GAAG;AACL;AAEA;;CAEC,GACD,SAAS;IACP,WAAW,WAAW,MAAM,WAAW;IACvC,MAAM,aACJ,UAAU,KAAK,EACf,UAAU,MAAM,GAAG,aAAa;IAElC,IAAI,MAAM,CAAC;IACX,SAAS,aAAa,aAAa,OAAO,oEAAoE;IAE9G;IACA;IACA;AACF;AAEA;;CAEC,GACD,SAAS;IACP,WAAW,WAAW,MAAM,WAAW;IAEvC,IAAI,UAAU,SAAS,CAAC,QAAQ,CAAC,YAC/B,UAAU,aAAa,IAAI;IAG7B,UAAU,CAAC,aAAa,OAAO,aAAa,aAAa;IACzD,QAAQ,OAAO,CAAC,SAAU,CAAC;QACzB,EAAE,IAAI;IACR;IAEA,4CAA4C;IAC5C,SAAS,aAAa;IACtB,UAAU;IAEV,iBAAiB;IACjB,IAAI,iBAAiB,cACnB,KAAK,KAAK,IAAI;SAEd,WAAW,KAAK,OAAO,KAAK;IAE9B,KAAK,MAAM,aAAa,OAAO,UAAU,MAAM,GAAG,aAAa;IAC/D,KAAK,GAAG,KAAK,GAAG,CAAC,eAAe,gBAAgB,IAAI,IAAI,YAAY,UAAU,MAAM,GAAG,aAAa;IAEpG,kBAAkB;IAClB,WAAW,KAAK,OAAO,KAAK;IAC5B,KAAK,OAAO,QAAQ,IAAI,aAAa,QAAQ,aAAa,MAAM,UAAU,MAAM,GAAG,aAAa;IAChG,IAAI,cACF,KAAK,KAAK,KAAK;IAEjB,KAAK,GAAG,OAAO,IAAI,QAAQ,IAAI,aAAa,QAAQ,IAAI,aAAa,MAAM,UAAU,MAAM,GAAG,aAAa;IAE3G,iBAAiB;IACjB,WAAW,KAAK,OAAO,KAAK;IAE5B,KAAK,OAAO,QAAQ,aAAa,OAAO,UAAU,MAAM,GAAG,aAAa;IACxE,IAAI,aACF,KAAK,KAAK,KAAK;IAEjB,KAAK,GAAG,YAAY,IAAI,QAAQ,aAAa,KAAK,UAAU,MAAM,GAAG,aAAa;IAClF,SAAS,aAAa,aAAa;AACrC;AAEA,gBAAgB;AAChB,SAAS,aAAa,MAAM;IAC1B,OAAO,QAAQ,MAAM,CAAC,CAAC;QACrB,OAAO,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG;IAChG;AACF;AAEA;;CAEC,GACD,IAAI,eAAe;AACnB,IAAI,kBAAkB;AAEtB,wDAAwD;AACxD,SAAS,WAAW,MAAM;IACxB,yCAAyC;IACzC,IAAI,cAAc;QAChB;QACA,YAAY,IAAI;QAEhB,uBAAuB;QACvB,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,IAAI;YAC/B,IAAI;YACJ,OAAQ;gBACN,KAAK;oBACH,SAAS,SAAS,aAAa,OAAO,CAAC;oBACvC,UAAU;oBACV,aAAa,OAAO,CAAC,kBAAkB;oBACvC;gBACF,KAAK;oBACH,SAAS,SAAS,aAAa,OAAO,CAAC;oBACvC,UAAU;oBACV,aAAa,OAAO,CAAC,sBAAsB;oBAC3C;gBACF,KAAK;oBACH,SAAS,SAAS,aAAa,OAAO,CAAC;oBACvC,UAAU;oBACV,aAAa,OAAO,CAAC,gBAAgB;oBACrC;YACJ;QACF;QAEA,IAAI,OAAO,IAAI,EAAE;YACf,OAAO,IAAI,GAAG;YACd,MAAM,oBAAoB,OAAO,GAAG;YAEpC,MAAO,CAAC,gBAAiB;gBACvB,IAAI,MAAM,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;gBACrC,IAAI,QAAQ,mBACV;oBAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;wBACtB,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG;wBACpB,kBAAkB;oBACpB;gBAAA;YAEJ;QACF;QACA,eAAe;QAEf;QACA,QAAQ,OAAO,CAAC,SAAU,CAAC;YACzB,EAAE,IAAI;QACR;IACF;IAEA,cAAc;IACd,OAAO,MAAM,GAAG;IAChB,OAAO,OAAO,GAAG;IACjB,IAAI,OAAO,IAAI,EAAE;QACf,WAAW;QACX,QAAQ,OAAO,CAAC,CAAC;YACf,EAAE,MAAM,GAAG;QACb;QACA;QACA;IACF;IACA,IAAI,OAAO,WAAW,IAAI,GAAG;QAC3B,6BAA6B;QAC7B,IAAI,YAAY,aAAa;QAC7B,UAAU,OAAO,CAAC,CAAC;YACjB,IAAI,CAAC,EAAE,MAAM,EAAE;gBACb,WAAW;gBACX,IAAI,EAAE,OAAO,EAAE;oBACb,EAAE,OAAO,GAAG;oBACZ,kBAAkB;gBACpB;YACF;QACF;IACF;AACF;AAEA,SAAS;IACP,iCAAiC;IACjC,IAAI,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,kBAAkB,MACpD;IAEF,QAAQ;IACR,IAAI,gBAAgB,SAAS,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,cAAc;QACzE,wCAAwC;QACxC,IAAI,SAAS,QAAQ,IAAI,CAAC,CAAC;YACzB,OAAO,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,aAAa,UAAU,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,aAAa;QACzF;QACA,IAAI,QACF,4CAA4C;QAC5C;YAAA,IAAI,CAAC,OAAO,MAAM,EAAE;gBAClB,IAAI,CAAC,OAAO,OAAO,EAAE;oBACnB,kBAAkB;oBAClB,SAAS;oBACT;gBACF,OAAO;oBACL,kBAAkB;oBAClB,SAAS;oBACT;gBACF;gBACA,OAAO,OAAO,GAAG,CAAC,OAAO,OAAO;YAClC;QAAA;IAEJ;IAEA,6BAA6B;IAC7B,IAAI,gBAAgB,QAAQ,CAAC,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,cAC3D;QAAA,IAAI,CAAC,cAAc;YACjB,IAAI,SAAS,QAAQ,IAAI,CAAC,CAAC;gBACzB,OAAO,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,aAAa,UAAU,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,aAAa;YACzF;YACA,IAAI,QAAQ;gBACV,IAAI,OAAO,OAAO,IAAI,OAAO,MAAM,EACjC,QAAQ,oCAAoC;gBAE9C,WAAW;gBACX,SAAS;gBACT;gBACA,IAAI,OAAO,IAAI,EACb;oBAAA,IAAI,CAAC,cAAc;wBACjB;wBACA;oBACF;gBAAA,OACK;oBACL,iCAAiC;oBACjC,IAAI,cAAc,QAAQ,MAAM,CAAC,CAAC;wBAChC,OAAO,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,MAAM;oBAC7B,GAAG,MAAM;oBACT,IAAI,eAAe,GACjB;wBAAA,IAAI,CAAC,cAAc;4BACjB;4BACA;wBACF;oBAAA;gBAEJ;YACF;QACF;IAAA;AAEJ;AAEA;;CAEC,GACD,aAAa;AACb,SAAS;IACP,eAAe;IACf,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,IAAI;QAC/B;QAEA,IAAI;QACJ,OAAQ;YACN,KAAK;gBACH,YAAY,SAAS,aAAa,OAAO,CAAC;gBAC1C,aAAa;gBACb,aAAa,OAAO,CAAC,qBAAqB;gBAC1C;YACF,KAAK;gBACH,YAAY,SAAS,aAAa,OAAO,CAAC;gBAC1C,aAAa;gBACb,aAAa,OAAO,CAAC,yBAAyB;gBAC9C;YACF,KAAK;gBACH,YAAY,SAAS,aAAa,OAAO,CAAC;gBAC1C,aAAa;gBACb,aAAa,OAAO,CAAC,mBAAmB;gBACxC;QACJ;IACF;AACF;AAEA,aAAa;AACb,SAAS;IACP,OAAO,CAAC,EAAE,GAAG;IACb,QAAQ,OAAO,CAAC,SAAU,CAAC;QACzB,EAAE,MAAM,GAAG;IACb;IAEA,uBAAuB;IACvB,WAAW;IACX,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,IAAI;QAC/B,IAAI;QACJ,OAAQ;YACN,KAAK;gBACH,MAAM,SAAS,aAAa,OAAO,CAAC;gBACpC,OAAO;gBACP,aAAa,OAAO,CAAC,eAAe;gBACpC;YACF,KAAK;gBACH,MAAM,SAAS,aAAa,OAAO,CAAC;gBACpC,OAAO;gBACP,aAAa,OAAO,CAAC,mBAAmB;gBACxC;YACF,KAAK;gBACH,MAAM,SAAS,aAAa,OAAO,CAAC;gBACpC,OAAO;gBACP,aAAa,OAAO,CAAC,aAAa;gBAClC;QACJ;QAEA,aAAa;QACb,IAAI;QACJ,OAAQ;YACN,KAAK;gBACH,YAAY,OAAO,aAAa,OAAO,CAAC;gBACxC;YACF,KAAK;gBACH,YAAY,OAAO,aAAa,OAAO,CAAC;gBACxC;YACF,KAAK;gBACH,YAAY,OAAO,aAAa,OAAO,CAAC;gBACxC;QACJ;QAEA,IAAI,cAAc,GAChB,OAAQ;YACN,KAAK;gBACH,aAAa,OAAO,CAAC,qBAAqB;gBAC1C;YACF,KAAK;gBACH,aAAa,OAAO,CAAC,yBAAyB;gBAC9C;YACF,KAAK;gBACH,aAAa,OAAO,CAAC,mBAAmB;gBACxC;QACJ;aAEA,IAAI,QAAQ,WAAW;YACrB,OAAO,CAAC,EAAE,GAAG;YACb,eAAe;YACf,OAAQ;gBACN,KAAK;oBACH,aAAa,OAAO,CAAC,qBAAqB;oBAC1C;gBACF,KAAK;oBACH,aAAa,OAAO,CAAC,yBAAyB;oBAC9C;gBACF,KAAK;oBACH,aAAa,OAAO,CAAC,mBAAmB;oBACxC;YACJ;YACA,aAAa,OAAO,CAAC,gBAAgB;QACvC;QAGF,YAAY;QACZ,MAAM,UAAU,IAAI;QACpB,IAAI,OAAO,AAAC,CAAA,UAAU,SAAQ,IAAK,MAAM,uDAAuD;QAEhG,IAAI;QACJ,OAAQ;YACN,KAAK;gBACH,WAAW,OAAO,aAAa,OAAO,CAAC;gBACvC;YACF,KAAK;gBACH,WAAW,OAAO,aAAa,OAAO,CAAC;gBACvC;YACF,KAAK;gBACH,WAAW,OAAO,aAAa,OAAO,CAAC;gBACvC;QACJ;QAEA,IAAI,aAAa,GACf,OAAQ;YACN,KAAK;gBACH,aAAa,OAAO,CAAC,oBAAoB;gBACzC;YACF,KAAK;gBACH,aAAa,OAAO,CAAC,wBAAwB;gBAC7C;YACF,KAAK;gBACH,aAAa,OAAO,CAAC,kBAAkB;gBACvC;QACJ;aAEA,IAAI,OAAO,UAAU;YACnB,OAAO,CAAC,EAAE,GAAG;YACb,cAAc;YACd,OAAQ;gBACN,KAAK;oBACH,aAAa,OAAO,CAAC,oBAAoB;oBACzC;gBACF,KAAK;oBACH,aAAa,OAAO,CAAC,wBAAwB;oBAC7C;gBACF,KAAK;oBACH,aAAa,OAAO,CAAC,kBAAkB;oBACvC;YACJ;YACA,aAAa,OAAO,CAAC,eAAe;QACtC;IAEJ;IACA,YAAY;AACd;AAEA,cAAc;AACd,SAAS;IACP,OAAO,CAAC,EAAE,GAAG;IACb,QAAQ,OAAO,CAAC,SAAU,CAAC;QACzB,EAAE,MAAM,GAAG;IACb;IAEA,MAAM,UAAU,IAAI;IACpB,IAAI,OAAO,UAAU,WAAW,OAAO;IACvC,OAAO,OAAO;IACd,YAAY;AACd;AAEA,0BAA0B;AAC1B,SAAS;IACP,IAAI;IACJ,OAAQ;QACN,KAAK;YACH,aAAa,SAAS,aAAa,OAAO,CAAC;YAC3C,cAAc;YACd,aAAa,OAAO,CAAC,sBAAsB;YAC3C;QACF,KAAK;YACH,aAAa,SAAS,aAAa,OAAO,CAAC;YAC3C,cAAc;YACd,aAAa,OAAO,CAAC,0BAA0B;YAC/C;QACF,KAAK;YACH,aAAa,SAAS,aAAa,OAAO,CAAC;YAC3C,cAAc;YACd,aAAa,OAAO,CAAC,oBAAoB;YACzC;IACJ;AACF;AAEA,oDAAoD;AACpD,SAAS;IACP,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,IAAI;QAC/B,IAAI,QAAQ;QACZ,OAAQ;YACN,KAAK;gBACH,SAAS,SAAS,aAAa,OAAO,CAAC;gBACvC,MAAM,SAAS,aAAa,OAAO,CAAC;gBACpC;YACF,KAAK;gBACH,SAAS,SAAS,aAAa,OAAO,CAAC;gBACvC,MAAM,SAAS,aAAa,OAAO,CAAC;gBACpC;YACF,KAAK;gBACH,SAAS,SAAS,aAAa,OAAO,CAAC;gBACvC,MAAM,SAAS,aAAa,OAAO,CAAC;gBACpC;QACJ;QACA,IAAI,gBAAgB;QAEpB,IAAI,WAAW,GACb,gBAAgB,MAAM;QAGxB,IAAI,kBAAkB,MACpB,uBAAuB;QACvB,OAAQ;YACN,KAAK;gBACH,OAAO,YAAY,CAAC,OAAO,CAAC,yBAAyB;gBACrD;YACF,KAAK;gBACH,OAAO,YAAY,CAAC,OAAO,CAAC,6BAA6B;gBACzD;YACF,KAAK;gBACH,OAAO,YAAY,CAAC,OAAO,CAAC,uBAAuB;gBACnD;QACJ;IAEJ;AACF;AAEA;;CAEC,GACD,SAAS;IACP,YAAY;IACZ,IAAI,YAAY,MAAM,YAAY,IAChC;QAAA,IAAI,UAAU,YAAY;YACxB,aAAa,OAAO,CAAC,SAAS;YAC9B,OAAO,QAAQ,CAAC,MAAM;QACxB;IAAA;IAEF,IAAI,YAAY,MAAM,YAAY,IAChC;QAAA,IAAI,UAAU,gBAAgB;YAC5B,aAAa,OAAO,CAAC,SAAS;YAC9B,OAAO,QAAQ,CAAC,MAAM;QACxB;IAAA;IAEF,IAAI,YAAY,MAAM,YAAY,IAChC;QAAA,IAAI,UAAU,UAAU;YACtB,aAAa,OAAO,CAAC,SAAS;YAC9B,OAAO,QAAQ,CAAC,MAAM;QACxB;IAAA;IAGF,WAAW;IACX,IAAI,YAAY,IACd,OAAO,QAAQ,CAAC,MAAM;AAE1B","sources":["src/emoji-minesweeper/emojiMinesweeper.js"],"sourcesContent":["/*\n *  Emoji Minesweeper\n *  Copyright (c) 2024 Michael Kolesidis\n *  GNU Affero General Public License v3.0\n *\n * minesweeperEmoji.js contains the game functionality,\n * everything that happens inside the game's board. It\n * also handles the update of the stats accordingly.\n */\n\n/**\n * Basics\n */\n// Disable the Friendly Error System\n// (not used in the minified version of P5.js)\ndisableFriendlyErrors = true;\n\n// Prevent right mouse click from opening browser context menu in order to be able to flag\ndocument.addEventListener('contextmenu', (event) => event.preventDefault());\n\n// Canvas\nlet cnv; // The canvas element that will contain the game\n\nconst themes = {\n  mine: {\n    name: 'mine',\n    title: 'Emoji Minesweeper',\n    mine: '💣',\n    detonation: '💥',\n    won: '😄',\n    lost: '😵',\n  },\n  flower: {\n    name: 'flower',\n    title: 'Emoji Flower Field',\n    mine: '🌺',\n    detonation: '🐛',\n    won: '😊',\n    lost: '😔',\n  },\n  mushroom: {\n    name: 'mushroom',\n    title: 'Emoji Shroom Picker',\n    mine: '🍄',\n    detonation: '🦄',\n    won: '😎',\n    lost: '😵‍💫',\n  },\n  bear: {\n    name: 'bear',\n    title: 'Emoji Bearspotting',\n    mine: '🐻',\n    detonation: '🐾',\n    won: '🌳',\n    lost: '🪵',\n  },\n  octopus: {\n    name: 'octopus',\n    title: 'Emoji Seasweeper',\n    mine: '🐙',\n    detonation: '🌊',\n    won: '⛵️',\n    lost: '🦈',\n  },\n  japan: {\n    name: 'japan',\n    title: '絵文字マインスイーパー',\n    mine: '🏯',\n    detonation: '👺',\n    won: '🌸',\n    lost: '🈲',\n  },\n};\n\n/**\n * Dark Mode\n */\nlet darkMode = JSON.parse(localStorage.getItem('darkMode')) ?? false;\n\n/**\n * Emojis\n */\nlet theme = window.localStorage.getItem('skin') ?? 'mine';\nwindow.localStorage.setItem('mainEmoji', themes[theme]['mine']);\n\nlet mineEmoji = themes[theme]['mine'];\nlet detonationEmoji = themes[theme]['detonation'];\nlet wonEmoji = themes[theme]['won'];\nlet lostEmoji = themes[theme]['lost'];\n\n// Emojis\nconst CLOSED = darkMode ? '⬛' : '🔲';\nlet NUMBERS = ['⬜️', '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣'];\nif (darkMode) NUMBERS[0] = '';\nconst FLAG = '🚩';\nlet DETONATION = detonationEmoji;\nlet MINE = mineEmoji;\nconst WRONG = '❌';\nlet WON = wonEmoji;\nlet LOST = lostEmoji;\nconst TIMER = '⌛';\nconst MOVES = '🧮';\n\n/**\n * Title\n */\nwindow.localStorage.setItem('title', themes[theme]['title']);\n\n/**\n * Settings\n */\nlet settings = {\n  level: {\n    // to be overridden by localStorage\n    columns: 9,\n    rows: 9,\n    mines: 10,\n  },\n  size: {\n    squareSize: 32,\n  },\n};\n\n/**\n * Level\n */\nlet level = localStorage.getItem('level');\n\nswitch (level) {\n  case 'beginner':\n    settings.level = {\n      columns: 9,\n      rows: 9,\n      mines: 10,\n    };\n    break;\n  case 'intermediate':\n    settings.level = {\n      columns: 16,\n      rows: 16,\n      mines: 40,\n    };\n    break;\n  case 'expert':\n    settings.level = {\n      columns: 30,\n      rows: 16,\n      mines: 99,\n    };\n    break;\n  case 'custom':\n    settings.level = {\n      columns: null,\n      rows: null,\n      mines: null,\n    };\n    break;\n}\n\n/**\n * Board dimensions and number of mines\n */\nlet squares = []; // Array to hold all the square objects\nlet squareSize = settings.size.squareSize; // The size (in pixels of each square)\nlet columns = settings.level.columns; // The number of columns in the board\nlet rows = settings.level.rows; // The number of rows in the board\nlet numberOfSquares = rows * columns;\nlet sizeError = squareSize * 0.175; // On Windows and on Linux if error is not added to size,\n// the left and bottom borders are not totally visible -\n// on Mac it works fine even without the error\n\nlet boardSize = {\n  width: squareSize * columns + sizeError,\n  height: squareSize * rows + sizeError,\n};\n\nlet initialMines = settings.level.mines; // Used by the mine indicator\nlet numberOfMines = initialMines; // Used to calculate mines to be allocated to squares\nlet squareCounter = 0; // The unique identifier of each square\nlet minedSquares = []; // A array containing the unique identifiers of all the squares that will contain mines\n\nlet flaggedSquares = 0;\nlet moves = 0; // total number of moves (left and right clicks on active squares)\nlet startTime = null; // used to calculate time\nlet gameFinished = false;\nlet newBestMoves = false; // used when the player has made a new best moves record\nlet newBestTime = false; // used when the player has made a new best time\n\n/**\n * Mine allocation\n */\nfunction allocateMines() {\n  while (numberOfMines > 0) {\n    let targetSquare = Math.floor(Math.random() * numberOfSquares);\n    if (!minedSquares.includes(targetSquare)) {\n      minedSquares.push(targetSquare);\n      numberOfMines -= 1;\n    }\n  }\n}\n\nfunction generateSquares() {\n  for (let i = 0; i < columns; i++) {\n    for (let j = 0; j < rows; j++) {\n      let newSquare = new Square(i, j, squareCounter);\n      squareCounter += 1;\n\n      // Check whether square includes mine\n      if (minedSquares.includes(newSquare.num)) {\n        newSquare.mine = true;\n      }\n      squares.push(newSquare);\n    }\n  }\n}\n\n// Calculate mines around each square\nfunction calculateMines() {\n  squares.forEach((s) => {\n    // Find squares touching each square\n    let neighbors = getNeighbors(s);\n    let reducer = (accumulator, currentValue) => accumulator + currentValue;\n    s.minesAround = neighbors.map((n) => n.mine).reduce(reducer); // Add all mine values to find total\n  });\n}\n\n// Time indicator\nlet timePassed = 0;\nlet stopTimer = false;\n\nconst startTimer = () => {\n  setInterval(() => {\n    if (stopTimer) {\n      return;\n    }\n    timePassed += 1;\n  }, 1000);\n};\n\n/**\n * Setup\n */\nfunction setup() {\n  darkMode ? background(25) : background(255);\n  cnv = createCanvas(\n    boardSize.width,\n    boardSize.height + squareSize * 0.75, // Added extra space for the mines and flagged squares indicators\n  );\n  cnv.parent('EmojiMinesweeper');\n  textSize(squareSize - squareSize * 0.05); // On Mac \"squareSize - 1\" works better, on Windows \"squareSize - 6\"\n\n  allocateMines();\n  generateSquares();\n  calculateMines();\n}\n\n/**\n * Draw\n */\nfunction draw() {\n  darkMode ? background(25) : background(255);\n\n  if (navigator.userAgent.includes('Firefox')) {\n    translate(squareSize / 10, 0);\n  }\n\n  translate(-squareSize * 0.075, squareSize - squareSize * 0.075);\n  squares.forEach(function (s) {\n    s.draw();\n  });\n\n  // Show mines and flagged squares indicators\n  textSize(squareSize * 0.6);\n  textStyle(BOLD);\n\n  // Mine indicator\n  if (flaggedSquares > initialMines) {\n    fill(248, 49, 47);\n  } else {\n    darkMode ? fill(225) : fill(35);\n  }\n  text(MINE, squareSize * 0.125, boardSize.height - squareSize * 0.275);\n  text(nf(Math.max(initialMines - flaggedSquares, 0), 3), squareSize, boardSize.height - squareSize * 0.25);\n\n  // Moves indicator\n  darkMode ? fill(225) : fill(35);\n  text(MOVES, width / 2 - squareSize * 1.975 + squareSize * 0.99, boardSize.height - squareSize * 0.275);\n  if (newBestMoves) {\n    fill(255, 176, 46);\n  }\n  text(nf(moves, 3), width / 2 - squareSize * 1.975 + 2 * squareSize * 0.99, boardSize.height - squareSize * 0.275);\n\n  // Time indicator\n  darkMode ? fill(225) : fill(35);\n\n  text(TIMER, width - squareSize * 1.975, boardSize.height - squareSize * 0.275);\n  if (newBestTime) {\n    fill(255, 176, 46);\n  }\n  text(nf(timePassed, 3), width - squareSize * 1.1, boardSize.height - squareSize * 0.25);\n  textSize(squareSize - squareSize * 0.05);\n}\n\n// Get neighbors\nfunction getNeighbors(square) {\n  return squares.filter((n) => {\n    return n.i >= square.i - 1 && n.i <= square.i + 1 && n.j >= square.j - 1 && n.j <= square.j + 1;\n  });\n}\n\n/**\n * Mouse Action Handling\n */\nlet isFirstClick = true;\nlet mineReallocated = false;\n\n// What happens every time the player clicks on a square\nfunction openSquare(square) {\n  // Make sure first click is not on a mine\n  if (isFirstClick) {\n    startTimer();\n    startTime = new Date();\n\n    // Update local storage\n    if (window.location.hash === '') {\n      let played;\n      switch (level) {\n        case 'beginner':\n          played = parseInt(localStorage.getItem('beginnerPlayed'));\n          played += 1;\n          localStorage.setItem('beginnerPlayed', played);\n          break;\n        case 'intermediate':\n          played = parseInt(localStorage.getItem('intermediatePlayed'));\n          played += 1;\n          localStorage.setItem('intermediatePlayed', played);\n          break;\n        case 'expert':\n          played = parseInt(localStorage.getItem('expertPlayed'));\n          played += 1;\n          localStorage.setItem('expertPlayed', played);\n          break;\n      }\n    }\n\n    if (square.mine) {\n      square.mine = false;\n      const originalSquareNum = square.num;\n\n      while (!mineReallocated) {\n        let num = Math.floor(Math.random() * numberOfSquares);\n        if (num !== originalSquareNum) {\n          if (!squares[num].mine) {\n            squares[num].mine = true;\n            mineReallocated = true;\n          }\n        }\n      }\n    }\n    isFirstClick = false;\n\n    calculateMines();\n    squares.forEach(function (s) {\n      s.draw();\n    });\n  }\n\n  // Open square\n  square.opened = true;\n  square.clicked = true;\n  if (square.mine) {\n    // End game\n    squares.forEach((s) => {\n      s.opened = true;\n    });\n    noLoop();\n    return;\n  }\n  if (square.minesAround == 0) {\n    // Recursively open neighbors\n    let neighbors = getNeighbors(square);\n    neighbors.forEach((s) => {\n      if (!s.opened) {\n        openSquare(s);\n        if (s.flagged) {\n          s.flagged = false;\n          flaggedSquares -= 1;\n        }\n      }\n    });\n  }\n}\n\nfunction mousePressed() {\n  // Disable click if modal is open\n  if (JSON.parse(localStorage.getItem('modalOpen')) === true) {\n    return;\n  }\n  // Flags\n  if (mouseButton === RIGHT || JSON.parse(localStorage.getItem('flagMode'))) {\n    // Find the square the player clicked on\n    let square = squares.find((s) => {\n      return s.x < mouseX && s.x + squareSize > mouseX && s.y < mouseY && s.y + squareSize > mouseY;\n    });\n    if (square) {\n      // Prevent opened squares from being flagged\n      if (!square.opened) {\n        if (!square.flagged) {\n          flaggedSquares += 1;\n          moves += 1;\n          addMove();\n        } else {\n          flaggedSquares -= 1;\n          moves += 1;\n          addMove();\n        }\n        square.flagged = !square.flagged;\n      }\n    }\n  }\n\n  // Find the square pressed on\n  if (mouseButton === LEFT && !JSON.parse(localStorage.getItem('flagMode'))) {\n    if (!gameFinished) {\n      let square = squares.find((s) => {\n        return s.x < mouseX && s.x + squareSize > mouseX && s.y < mouseY && s.y + squareSize > mouseY;\n      });\n      if (square) {\n        if (square.flagged || square.opened) {\n          return; // Do not allow opening when flagged\n        }\n        openSquare(square);\n        moves += 1;\n        addMove();\n        if (square.mine) {\n          if (!gameFinished) {\n            gameLost();\n            gameEnded();\n          }\n        } else {\n          // Check if the game has been won\n          let squaresLeft = squares.filter((s) => {\n            return !s.mine && !s.opened;\n          }).length;\n          if (squaresLeft == 0) {\n            if (!gameFinished) {\n              gameWon();\n              gameEnded();\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Endgame\n */\n// Handle end\nfunction gameEnded() {\n  gameFinished = true;\n  if (window.location.hash === '') {\n    calculateWinPercentage();\n\n    let totalTime;\n    switch (level) {\n      case 'beginner':\n        totalTime = parseInt(localStorage.getItem('beginnerTotalTime'));\n        totalTime += timePassed;\n        localStorage.setItem('beginnerTotalTime', totalTime);\n        break;\n      case 'intermediate':\n        totalTime = parseInt(localStorage.getItem('intermediateTotalTime'));\n        totalTime += timePassed;\n        localStorage.setItem('intermediateTotalTime', totalTime);\n        break;\n      case 'expert':\n        totalTime = parseInt(localStorage.getItem('expertTotalTime'));\n        totalTime += timePassed;\n        localStorage.setItem('expertTotalTime', totalTime);\n        break;\n    }\n  }\n}\n\n// Handle win\nfunction gameWon() {\n  NUMBERS[0] = WON;\n  squares.forEach(function (s) {\n    s.opened = true;\n  });\n\n  // Update local storage\n  // Won Data\n  if (window.location.hash === '') {\n    let won;\n    switch (level) {\n      case 'beginner':\n        won = parseInt(localStorage.getItem('beginnerWon'));\n        won += 1;\n        localStorage.setItem('beginnerWon', won);\n        break;\n      case 'intermediate':\n        won = parseInt(localStorage.getItem('intermediateWon'));\n        won += 1;\n        localStorage.setItem('intermediateWon', won);\n        break;\n      case 'expert':\n        won = parseInt(localStorage.getItem('expertWon'));\n        won += 1;\n        localStorage.setItem('expertWon', won);\n        break;\n    }\n\n    // Moves Data\n    let bestMoves;\n    switch (level) {\n      case 'beginner':\n        bestMoves = Number(localStorage.getItem('beginnerBestMoves'));\n        break;\n      case 'intermediate':\n        bestMoves = Number(localStorage.getItem('intermediateBestMoves'));\n        break;\n      case 'expert':\n        bestMoves = Number(localStorage.getItem('expertBestMoves'));\n        break;\n    }\n\n    if (bestMoves === 0) {\n      switch (level) {\n        case 'beginner':\n          localStorage.setItem('beginnerBestMoves', moves);\n          break;\n        case 'intermediate':\n          localStorage.setItem('intermediateBestMoves', moves);\n          break;\n        case 'expert':\n          localStorage.setItem('expertBestMoves', moves);\n          break;\n      }\n    } else {\n      if (moves < bestMoves) {\n        NUMBERS[0] = '🥳';\n        newBestMoves = true;\n        switch (level) {\n          case 'beginner':\n            localStorage.setItem('beginnerBestMoves', moves);\n            break;\n          case 'intermediate':\n            localStorage.setItem('intermediateBestMoves', moves);\n            break;\n          case 'expert':\n            localStorage.setItem('expertBestMoves', moves);\n            break;\n        }\n        localStorage.setItem('newBestMoves', 'true');\n      }\n    }\n\n    // Time Data\n    const endTime = new Date();\n    let time = (endTime - startTime) / 1000; //initially in milliseconds, divide by 1000 for seconds\n\n    let bestTime;\n    switch (level) {\n      case 'beginner':\n        bestTime = Number(localStorage.getItem('beginnerBestTime'));\n        break;\n      case 'intermediate':\n        bestTime = Number(localStorage.getItem('intermediateBestTime'));\n        break;\n      case 'expert':\n        bestTime = Number(localStorage.getItem('expertBestTime'));\n        break;\n    }\n\n    if (bestTime === 0) {\n      switch (level) {\n        case 'beginner':\n          localStorage.setItem('beginnerBestTime', time);\n          break;\n        case 'intermediate':\n          localStorage.setItem('intermediateBestTime', time);\n          break;\n        case 'expert':\n          localStorage.setItem('expertBestTime', time);\n          break;\n      }\n    } else {\n      if (time < bestTime) {\n        NUMBERS[0] = '🥳';\n        newBestTime = true;\n        switch (level) {\n          case 'beginner':\n            localStorage.setItem('beginnerBestTime', time);\n            break;\n          case 'intermediate':\n            localStorage.setItem('intermediateBestTime', time);\n            break;\n          case 'expert':\n            localStorage.setItem('expertBestTime', time);\n            break;\n        }\n        localStorage.setItem('newBestTime', 'true');\n      }\n    }\n  }\n  stopTimer = true;\n}\n\n// handle loss\nfunction gameLost() {\n  NUMBERS[0] = LOST;\n  squares.forEach(function (s) {\n    s.opened = true;\n  });\n\n  const endTime = new Date();\n  let time = endTime - startTime; //in ms\n  time = time / 1000;\n  stopTimer = true;\n}\n\n// Add move to total moves\nfunction addMove() {\n  let totalMoves;\n  switch (level) {\n    case 'beginner':\n      totalMoves = parseInt(localStorage.getItem('beginnerTotalMoves'));\n      totalMoves += 1;\n      localStorage.setItem('beginnerTotalMoves', totalMoves);\n      break;\n    case 'intermediate':\n      totalMoves = parseInt(localStorage.getItem('intermediateTotalMoves'));\n      totalMoves += 1;\n      localStorage.setItem('intermediateTotalMoves', totalMoves);\n      break;\n    case 'expert':\n      totalMoves = parseInt(localStorage.getItem('expertTotalMoves'));\n      totalMoves += 1;\n      localStorage.setItem('expertTotalMoves', totalMoves);\n      break;\n  }\n}\n\n// Calculate percentage of wins / total games played\nfunction calculateWinPercentage() {\n  if (window.location.hash === '') {\n    let played, won;\n    switch (level) {\n      case 'beginner':\n        played = parseInt(localStorage.getItem('beginnerPlayed'));\n        won = parseInt(localStorage.getItem('beginnerWon'));\n        break;\n      case 'intermediate':\n        played = parseInt(localStorage.getItem('intermediatePlayed'));\n        won = parseInt(localStorage.getItem('intermediateWon'));\n        break;\n      case 'expert':\n        played = parseInt(localStorage.getItem('expertPlayed'));\n        won = parseInt(localStorage.getItem('expertWon'));\n        break;\n    }\n    let winPercentage = null;\n\n    if (played !== 0) {\n      winPercentage = won / played;\n    }\n\n    if (winPercentage !== null) {\n      // Update local storage\n      switch (level) {\n        case 'beginner':\n          window.localStorage.setItem('beginnerWinPercentage', winPercentage);\n          break;\n        case 'intermediate':\n          window.localStorage.setItem('intermediateWinPercentage', winPercentage);\n          break;\n        case 'expert':\n          window.localStorage.setItem('expertWinPercentage', winPercentage);\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Keyboard Action Handling\n */\nfunction keyPressed() {\n  // Set Level\n  if (keyCode === 49 || keyCode === 97) {\n    if (level !== 'beginner') {\n      localStorage.setItem('level', 'beginner');\n      window.location.reload();\n    }\n  }\n  if (keyCode === 50 || keyCode === 98) {\n    if (level !== 'intermediate') {\n      localStorage.setItem('level', 'intermediate');\n      window.location.reload();\n    }\n  }\n  if (keyCode === 51 || keyCode === 99) {\n    if (level !== 'expert') {\n      localStorage.setItem('level', 'expert');\n      window.location.reload();\n    }\n  }\n\n  // New Game\n  if (keyCode === 78) {\n    window.location.reload();\n  }\n}\n"],"names":[],"version":3,"file":"index.b9620702.js.map"}