{"mappings":"","sources":["src/snake/classes/grid.js"],"sourcesContent":["class Grid {\n  constructor(width, height, colour, blockWidth) {\n    this.width = width;\n    this.height = height;\n    this.safeColour = colour;\n    this.unsafeColour = [174, 177, 183];\n    this.blockWidth = blockWidth;\n    this.safeBlocks = [];\n    this.unsafeBlocks = [];\n\n    this._populateGrid();\n  }\n\n  update() {}\n\n  draw() {\n    noStroke();\n    this.safeBlocks.concat(this.unsafeBlocks).forEach((block) => block.draw());\n  }\n\n  // private\n  _populateGrid() {\n    const [xLength, yLength] = [this.width, this.height].map((length) => Math.floor(length / this.blockWidth));\n\n    const isUnsafeBlock = (xCount, yCount, xLength, yLength) =>\n      xCount === 0 || yCount === 0 || xCount === xLength - 1 || yCount === yLength - 1;\n\n    for (let yCount = 0; yCount < yLength; yCount++) {\n      for (let xCount = 0; xCount < xLength; xCount++) {\n        const blockX = this.blockWidth * xCount;\n        const blockY = this.blockWidth * yCount;\n\n        if (isUnsafeBlock(xCount, yCount, xLength, yLength)) {\n          this.unsafeBlocks.push(new Block(blockX, blockY, this.blockWidth, this.unsafeColour));\n        } else {\n          this.safeBlocks.push(new Block(blockX, blockY, this.blockWidth, this.safeColour));\n        }\n      }\n    }\n  }\n}\n"],"names":[],"version":3,"file":"index.999b58ed.js.map"}