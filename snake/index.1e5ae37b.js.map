{"mappings":"AAAA,MAAM;IACJ,YAAY,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,CAAE;QAC7C,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,YAAY,GAAG;YAAC;YAAK;YAAK;SAAI;QACnC,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,UAAU,GAAG,EAAE;QACpB,IAAI,CAAC,YAAY,GAAG,EAAE;QAEtB,IAAI,CAAC,aAAa;IACpB;IAEA,SAAS,CAAC;IAEV,OAAO;QACL;QACA,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,QAAU,MAAM,IAAI;IACzE;IAEA,UAAU;IACV,gBAAgB;QACd,MAAM,CAAC,SAAS,QAAQ,GAAG;YAAC,IAAI,CAAC,KAAK;YAAE,IAAI,CAAC,MAAM;SAAC,CAAC,GAAG,CAAC,CAAC,SAAW,KAAK,KAAK,CAAC,SAAS,IAAI,CAAC,UAAU;QAExG,MAAM,gBAAgB,CAAC,QAAQ,QAAQ,SAAS,UAC9C,WAAW,KAAK,WAAW,KAAK,WAAW,UAAU,KAAK,WAAW,UAAU;QAEjF,IAAK,IAAI,SAAS,GAAG,SAAS,SAAS,SACrC,IAAK,IAAI,SAAS,GAAG,SAAS,SAAS,SAAU;YAC/C,MAAM,SAAS,IAAI,CAAC,UAAU,GAAG;YACjC,MAAM,SAAS,IAAI,CAAC,UAAU,GAAG;YAEjC,IAAI,cAAc,QAAQ,QAAQ,SAAS,UACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,MAAM,QAAQ,QAAQ,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY;iBAEnF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,MAAM,QAAQ,QAAQ,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU;QAEnF;IAEJ;AACF","sources":["src/snake/classes/grid.js"],"sourcesContent":["class Grid {\n  constructor(width, height, colour, blockWidth) {\n    this.width = width;\n    this.height = height;\n    this.safeColour = colour;\n    this.unsafeColour = [174, 177, 183];\n    this.blockWidth = blockWidth;\n    this.safeBlocks = [];\n    this.unsafeBlocks = [];\n\n    this._populateGrid();\n  }\n\n  update() {}\n\n  draw() {\n    noStroke();\n    this.safeBlocks.concat(this.unsafeBlocks).forEach((block) => block.draw());\n  }\n\n  // private\n  _populateGrid() {\n    const [xLength, yLength] = [this.width, this.height].map((length) => Math.floor(length / this.blockWidth));\n\n    const isUnsafeBlock = (xCount, yCount, xLength, yLength) =>\n      xCount === 0 || yCount === 0 || xCount === xLength - 1 || yCount === yLength - 1;\n\n    for (let yCount = 0; yCount < yLength; yCount++) {\n      for (let xCount = 0; xCount < xLength; xCount++) {\n        const blockX = this.blockWidth * xCount;\n        const blockY = this.blockWidth * yCount;\n\n        if (isUnsafeBlock(xCount, yCount, xLength, yLength)) {\n          this.unsafeBlocks.push(new Block(blockX, blockY, this.blockWidth, this.unsafeColour));\n        } else {\n          this.safeBlocks.push(new Block(blockX, blockY, this.blockWidth, this.safeColour));\n        }\n      }\n    }\n  }\n}\n"],"names":[],"version":3,"file":"index.1e5ae37b.js.map"}