{"mappings":"ACAe,SAAS,aAAa,CAAC","sources":["<anon>","src/snake/classes/game.js"],"sourcesContent":["const parent = document.querySelector(\".main\");\nclass Game {\n    constructor(){\n        this.BLOCK_WIDTH = 35;\n        this.GRID_COLOUR = [\n            207,\n            181,\n            242\n        ];\n        this.SNAKE_COLOUR = [\n            117,\n            232,\n            116\n        ];\n        this.FOOD_COLOUR = [\n            230,\n            80,\n            90\n        ];\n        this.canvasWidth = parent.offsetWidth - 20;\n        this.canvasHeight = parent.offsetHeight - 20;\n        this.grid;\n        this.snake;\n        this.food;\n        this.score;\n        this.gridColour;\n        this.inputQueue = [];\n        this.paused = false;\n        this.SNAKE_MOVES = {\n            UP: ()=>this.snake.up(),\n            DOWN: ()=>this.snake.down(),\n            LEFT: ()=>this.snake.left(),\n            RIGHT: ()=>this.snake.right()\n        };\n        const CANVAS = createCanvas(this.canvasWidth, this.canvasHeight);\n        CANVAS.parent(\"Snake\");\n        const fr = (this.canvasWidth + this.canvasHeight) / 170;\n        frameRate(fr);\n        this.newGame();\n    }\n    newGame() {\n        this.gridColour = [\n            Math.random() * 130,\n            Math.random() * 130,\n            Math.random() * 130\n        ];\n        this.grid = new Grid(this.canvasWidth, this.canvasHeight, this.gridColour, this.BLOCK_WIDTH);\n        const safeBlock = this.grid.safeBlocks[0];\n        this.snake = new Snake(safeBlock.x, safeBlock.y, this.BLOCK_WIDTH, this.SNAKE_COLOUR);\n        this.food = new Food(this.BLOCK_WIDTH, this.FOOD_COLOUR);\n        this._placeNewFood();\n        this.score = new Score(this.BLOCK_WIDTH, this.BLOCK_WIDTH - this.BLOCK_WIDTH / 7, this.BLOCK_WIDTH / 1.5, 0);\n    }\n    drawPaused() {\n        fill([\n            220,\n            220,\n            220\n        ]);\n        textSize(50);\n        textStyle(BOLD);\n        textAlign(CENTER, CENTER);\n        text(\"PAUSED\", this.canvasWidth / 2, this.canvasHeight / 2);\n    }\n    update() {\n        if (this.paused) return this.drawPaused();\n        // update snakes direction from the input queue\n        this.inputQueue.length > 0 && this.inputQueue.shift().call();\n        this.snake.update();\n        this.grid.update();\n        if (this.snake.isDead(this.grid)) {\n            window.alert(`GAME OVER! Score: ${this.score.points}\\nClick 'OK' to restart`);\n            this.newGame();\n        }\n        if (this.snake.eat(this.food)) {\n            this.score.points++;\n            this._placeNewFood();\n        }\n        [\n            this.grid,\n            this.food,\n            this.snake,\n            this.score\n        ].forEach((object)=>object.draw());\n    }\n    handleDoubleTap() {\n        this._togglePaused();\n    }\n    handleKeyPress(keyCode) {\n        if (keyCode === 80) {\n            this._togglePaused();\n            return;\n        }\n        if (this.paused) return;\n        switch(keyCode){\n            case UP_ARROW:\n                this._queueMove(this.SNAKE_MOVES.UP);\n                break;\n            case DOWN_ARROW:\n                this._queueMove(this.SNAKE_MOVES.DOWN);\n                break;\n            case LEFT_ARROW:\n                this._queueMove(this.SNAKE_MOVES.LEFT);\n                break;\n            case RIGHT_ARROW:\n                this._queueMove(this.SNAKE_MOVES.RIGHT);\n                break;\n        }\n    }\n    handleTouchSwipe(dx, dy) {\n        if (this.paused) return;\n        const move = abs(dx) > abs(dy) ? dx > 0 ? this.SNAKE_MOVES.RIGHT : this.SNAKE_MOVES.LEFT : dy > 0 ? this.SNAKE_MOVES.DOWN : this.SNAKE_MOVES.UP;\n        this._queueMove(move);\n    }\n    _queueMove(callback) {\n        this.inputQueue.push(callback);\n    }\n    _togglePaused() {\n        this.paused = !this.paused;\n    }\n    _placeNewFood() {\n        const block = this._findUnoccupiedSafeBlock();\n        this.food.place(block.x, block.y);\n    }\n    _findUnoccupiedSafeBlock() {\n        const snakeCoords = this.snake.coords();\n        const unOccupiedSafeBlocks = this.grid.safeBlocks.filter((block)=>!snakeCoords[[\n                block.x,\n                block.y\n            ]]);\n        return unOccupiedSafeBlocks[Math.floor(Math.random() * unOccupiedSafeBlocks.length)];\n    }\n}\n\n//# sourceMappingURL=index.6f638f6e.js.map\n","const parent = document.querySelector('.main');\n\nclass Game {\n  constructor() {\n    this.BLOCK_WIDTH = 35;\n    this.GRID_COLOUR = [207, 181, 242];\n    this.SNAKE_COLOUR = [117, 232, 116];\n    this.FOOD_COLOUR = [230, 80, 90];\n    this.canvasWidth = parent.offsetWidth - 20;\n    this.canvasHeight = parent.offsetHeight - 20;\n    this.grid;\n    this.snake;\n    this.food;\n    this.score;\n    this.gridColour;\n    this.inputQueue = [];\n    this.paused = false;\n\n    this.SNAKE_MOVES = {\n      UP: () => this.snake.up(),\n      DOWN: () => this.snake.down(),\n      LEFT: () => this.snake.left(),\n      RIGHT: () => this.snake.right(),\n    };\n\n    const CANVAS = createCanvas(this.canvasWidth, this.canvasHeight);\n    CANVAS.parent('Snake');\n    const fr = (this.canvasWidth + this.canvasHeight) / 170;\n    frameRate(fr);\n    this.newGame();\n  }\n\n  newGame() {\n    this.gridColour = [Math.random() * 130, Math.random() * 130, Math.random() * 130];\n    this.grid = new Grid(this.canvasWidth, this.canvasHeight, this.gridColour, this.BLOCK_WIDTH);\n\n    const safeBlock = this.grid.safeBlocks[0];\n    this.snake = new Snake(safeBlock.x, safeBlock.y, this.BLOCK_WIDTH, this.SNAKE_COLOUR);\n\n    this.food = new Food(this.BLOCK_WIDTH, this.FOOD_COLOUR);\n    this._placeNewFood();\n\n    this.score = new Score(this.BLOCK_WIDTH, this.BLOCK_WIDTH - this.BLOCK_WIDTH / 7, this.BLOCK_WIDTH / 1.5, 0);\n  }\n\n  drawPaused() {\n    fill([220, 220, 220]);\n    textSize(50);\n    textStyle(BOLD);\n    textAlign(CENTER, CENTER);\n    text('PAUSED', this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n\n  update() {\n    if (this.paused) return this.drawPaused();\n\n    // update snakes direction from the input queue\n    this.inputQueue.length > 0 && this.inputQueue.shift().call();\n\n    this.snake.update();\n\n    this.grid.update();\n\n    if (this.snake.isDead(this.grid)) {\n      window.alert(`GAME OVER! Score: ${this.score.points}\\nClick 'OK' to restart`);\n      this.newGame();\n    }\n\n    if (this.snake.eat(this.food)) {\n      this.score.points++;\n      this._placeNewFood();\n    }\n\n    [this.grid, this.food, this.snake, this.score].forEach((object) => object.draw());\n  }\n\n  handleDoubleTap() {\n    this._togglePaused();\n  }\n\n  handleKeyPress(keyCode) {\n    if (keyCode === 80) {\n      this._togglePaused();\n      return;\n    }\n\n    if (this.paused) {\n      return;\n    }\n\n    switch (keyCode) {\n      case UP_ARROW:\n        this._queueMove(this.SNAKE_MOVES.UP);\n        break;\n      case DOWN_ARROW:\n        this._queueMove(this.SNAKE_MOVES.DOWN);\n        break;\n      case LEFT_ARROW:\n        this._queueMove(this.SNAKE_MOVES.LEFT);\n        break;\n      case RIGHT_ARROW:\n        this._queueMove(this.SNAKE_MOVES.RIGHT);\n        break;\n    }\n  }\n\n  handleTouchSwipe(dx, dy) {\n    if (this.paused) {\n      return;\n    }\n\n    const move =\n      abs(dx) > abs(dy)\n        ? dx > 0\n          ? this.SNAKE_MOVES.RIGHT\n          : this.SNAKE_MOVES.LEFT\n        : dy > 0\n          ? this.SNAKE_MOVES.DOWN\n          : this.SNAKE_MOVES.UP;\n\n    this._queueMove(move);\n  }\n\n  _queueMove(callback) {\n    this.inputQueue.push(callback);\n  }\n\n  _togglePaused() {\n    this.paused = !this.paused;\n  }\n\n  _placeNewFood() {\n    const block = this._findUnoccupiedSafeBlock();\n    this.food.place(block.x, block.y);\n  }\n\n  _findUnoccupiedSafeBlock() {\n    const snakeCoords = this.snake.coords();\n    const unOccupiedSafeBlocks = this.grid.safeBlocks.filter((block) => !snakeCoords[[block.x, block.y]]);\n\n    return unOccupiedSafeBlocks[Math.floor(Math.random() * unOccupiedSafeBlocks.length)];\n  }\n}\n"],"names":["document","querySelector"],"version":3,"file":"index.6f638f6e.js.map"}