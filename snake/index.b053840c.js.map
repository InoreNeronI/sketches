{"mappings":"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","sources":["src/snake/classes/game.js"],"sourcesContent":["const parent = document.querySelector('.main');\n\nclass Game {\n  constructor() {\n    this.BLOCK_WIDTH = 35;\n    this.GRID_COLOUR = [207, 181, 242];\n    this.SNAKE_COLOUR = [117, 232, 116];\n    this.FOOD_COLOUR = [230, 80, 90];\n    this.canvasWidth = parent.offsetWidth - 20;\n    this.canvasHeight = parent.offsetHeight - 20;\n    this.grid;\n    this.snake;\n    this.food;\n    this.score;\n    this.gridColour;\n    this.inputQueue = [];\n    this.paused = false;\n\n    this.SNAKE_MOVES = {\n      UP: () => this.snake.up(),\n      DOWN: () => this.snake.down(),\n      LEFT: () => this.snake.left(),\n      RIGHT: () => this.snake.right(),\n    };\n\n    const CANVAS = createCanvas(this.canvasWidth, this.canvasHeight);\n    CANVAS.parent('Snake');\n    const fr = (this.canvasWidth + this.canvasHeight) / 170;\n    frameRate(fr);\n    this.newGame();\n  }\n\n  newGame() {\n    this.gridColour = [Math.random() * 130, Math.random() * 130, Math.random() * 130];\n    this.grid = new Grid(this.canvasWidth, this.canvasHeight, this.gridColour, this.BLOCK_WIDTH);\n\n    const safeBlock = this.grid.safeBlocks[0];\n    this.snake = new Snake(safeBlock.x, safeBlock.y, this.BLOCK_WIDTH, this.SNAKE_COLOUR);\n\n    this.food = new Food(this.BLOCK_WIDTH, this.FOOD_COLOUR);\n    this._placeNewFood();\n\n    this.score = new Score(this.BLOCK_WIDTH, this.BLOCK_WIDTH - this.BLOCK_WIDTH / 7, this.BLOCK_WIDTH / 1.5, 0);\n  }\n\n  drawPaused() {\n    fill([220, 220, 220]);\n    textSize(50);\n    textStyle(BOLD);\n    textAlign(CENTER, CENTER);\n    text('PAUSED', this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n\n  update() {\n    if (this.paused) return this.drawPaused();\n\n    // update snakes direction from the input queue\n    this.inputQueue.length > 0 && this.inputQueue.shift().call();\n\n    this.snake.update();\n\n    this.grid.update();\n\n    if (this.snake.isDead(this.grid)) {\n      window.alert(`GAME OVER! Score: ${this.score.points}\\nClick 'OK' to restart`);\n      this.newGame();\n    }\n\n    if (this.snake.eat(this.food)) {\n      this.score.points++;\n      this._placeNewFood();\n    }\n\n    [this.grid, this.food, this.snake, this.score].forEach((object) => object.draw());\n  }\n\n  handleDoubleTap() {\n    this._togglePaused();\n  }\n\n  handleKeyPress(keyCode) {\n    if (keyCode === 80) {\n      this._togglePaused();\n      return;\n    }\n\n    if (this.paused) {\n      return;\n    }\n\n    switch (keyCode) {\n      case UP_ARROW:\n        this._queueMove(this.SNAKE_MOVES.UP);\n        break;\n      case DOWN_ARROW:\n        this._queueMove(this.SNAKE_MOVES.DOWN);\n        break;\n      case LEFT_ARROW:\n        this._queueMove(this.SNAKE_MOVES.LEFT);\n        break;\n      case RIGHT_ARROW:\n        this._queueMove(this.SNAKE_MOVES.RIGHT);\n        break;\n    }\n  }\n\n  handleTouchSwipe(dx, dy) {\n    if (this.paused) {\n      return;\n    }\n\n    const move =\n      abs(dx) > abs(dy) ? (dx > 0 ? this.SNAKE_MOVES.RIGHT : this.SNAKE_MOVES.LEFT) : dy > 0 ? this.SNAKE_MOVES.DOWN : this.SNAKE_MOVES.UP;\n\n    this._queueMove(move);\n  }\n\n  _queueMove(callback) {\n    this.inputQueue.push(callback);\n  }\n\n  _togglePaused() {\n    this.paused = !this.paused;\n  }\n\n  _placeNewFood() {\n    const block = this._findUnoccupiedSafeBlock();\n    this.food.place(block.x, block.y);\n  }\n\n  _findUnoccupiedSafeBlock() {\n    const snakeCoords = this.snake.coords();\n    const unOccupiedSafeBlocks = this.grid.safeBlocks.filter((block) => !snakeCoords[[block.x, block.y]]);\n\n    return unOccupiedSafeBlocks[Math.floor(Math.random() * unOccupiedSafeBlocks.length)];\n  }\n}\n"],"names":[],"version":3,"file":"index.b053840c.js.map"}