{"mappings":"AAAA,MAAM,oBAAoB;IACxB,cAAc;QACZ,IAAI,UAAU;YAAC;YAAM,KAAK,GAAG;SAAG;QAChC,UAAU;YAAC;YAAS,KAAK,GAAG;SAAG;QAC/B,UAAU;YAAC;YAAS,KAAK,GAAG;SAAG;QAC/B,IAAI,OAAO,eAAe,SAAS,CAAC;QACpC,IAAI,UAAU;YAAC,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;SAAG;QAClD,GACE,MACA,KAAK,KAAK,CAAC,CAAC,GAAG,IAAM,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;IAE9C;IAEA,gBAAgB;QACd,IAAI,UAAU;YAAC;YAAM,KAAK,GAAG;SAAG;QAChC,UAAU;YAAC;YAAS,KAAK,GAAG;SAAG;QAC/B,UAAU;YAAC;YAAS,KAAK,GAAG;SAAG;QAC/B,IAAI,OAAO,eAAe,SAAS,CAAC;QACpC,IAAI,SAAS,eAAe,WAAW,CAAC,MAAM,GAAG;QACjD,IAAI,YAAY;YACd;gBAAC,KAAK,IAAI;gBAAE;gBAAM;aAAK;YACvB;gBAAC,KAAK,KAAK;gBAAE;gBAAM;aAAK;YACxB;gBAAC;gBAAM;gBAAM;aAAK;SACnB;QACD,GACE,MACA,OAAO,KAAK,CAAC,CAAC,KAAK,IAAM,IAAI,KAAK,CAAC,CAAC,GAAG,IAAO,KAAK,OAAO,KAAK,SAAS,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;IAEzG;IAEA,QAAQ;QACN,IAAI,aAAa;QACjB,WAAW,OAAO,CAAC,KAAK,GAAG;QAC3B,WAAW,OAAO,CAAC,KAAK,GAAG;QAC3B,IAAI,OAAO,eAAe,MAAM,CAAC,KAAK,GAAG,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,WAAW,IAAI,IAAI,KAAK,IAAI;QAC3F,IAAI,UAAU;YAAC,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;SAAG;QAC1E,GACE,MACA,KAAK,KAAK,CAAC,CAAC,GAAG,IAAM,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;QAG5C,2BAA2B;QAC3B,OAAO,eAAe,MAAM,CAAC,KAAK,GAAG,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,WAAW,IAAI,IAAI,KAAK,KAAK;QACxF,UAAU;YAAC,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;SAAG;QACtE,GACE,MACA,KAAK,KAAK,CAAC,CAAC,GAAG,IAAM,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;QAG5C,OAAO;QACP,WAAW,OAAO,CAAC,KAAK,GAAG;QAC3B,OAAO,eAAe,MAAM,CAAC,KAAK,GAAG,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,WAAW,IAAI,IAAI,KAAK,KAAK;QACxF,UAAU;YAAC,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;YAAI,KAAK,GAAG;SAAG;QACtE,GACE,MACA,KAAK,KAAK,CAAC,CAAC,GAAG,IAAM,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;IAE9C;AACF","sources":["src/snake-pro/tests/shortestPath-tests.js"],"sourcesContent":["const ShortestPathTests = {\n  'build path': () => {\n    let current = [null, Node(0, 0)];\n    current = [current, Node(1, 0)];\n    current = [current, Node(1, 1)];\n    let path = fnShortestPath.buildPath(current);\n    let pathExp = [Node(1, 1), Node(1, 0), Node(0, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n  },\n\n  'build policy': () => {\n    let current = [null, Node(0, 0)];\n    current = [current, Node(1, 0)];\n    current = [current, Node(1, 1)];\n    let path = fnShortestPath.buildPath(current);\n    let policy = fnShortestPath.buildPolicy(path, 3, 3);\n    let policyExp = [\n      [game.EAST, null, null],\n      [game.SOUTH, null, null],\n      [null, null, null],\n    ];\n    eq(\n      true,\n      policy.every((col, i) => col.every((v, j) => (v == null ? v == policyExp[i][j] : v.eq(policyExp[i][j])))),\n    );\n  },\n\n  search: () => {\n    let exclusions = NodeSet();\n    exclusions.addNode(Node(1, 0));\n    exclusions.addNode(Node(0, 0));\n    let path = fnShortestPath.search(Node(1, 0), Node(2, 3), 5, 5, exclusions.copy(), game.EAST);\n    let pathExp = [Node(2, 3), Node(2, 2), Node(2, 1), Node(2, 0), Node(1, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n\n    // Change initial direction\n    path = fnShortestPath.search(Node(1, 0), Node(2, 3), 5, 5, exclusions.copy(), game.SOUTH);\n    pathExp = [Node(2, 3), Node(1, 3), Node(1, 2), Node(1, 1), Node(1, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n\n    // Wall\n    exclusions.addNode(Node(1, 1));\n    path = fnShortestPath.search(Node(1, 0), Node(2, 3), 5, 5, exclusions.copy(), game.SOUTH);\n    pathExp = [Node(2, 3), Node(2, 2), Node(2, 1), Node(2, 0), Node(1, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n  },\n};\n"],"names":[],"version":3,"file":"test.560e8337.js.map"}