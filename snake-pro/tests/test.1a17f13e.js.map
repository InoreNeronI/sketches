{"mappings":"","sources":["src/snake-pro/tests/shortestPath-tests.js"],"sourcesContent":["const ShortestPathTests = {\n  'build path': () => {\n    let current = [null, Node(0, 0)];\n    current = [current, Node(1, 0)];\n    current = [current, Node(1, 1)];\n    let path = fnShortestPath.buildPath(current);\n    let pathExp = [Node(1, 1), Node(1, 0), Node(0, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n  },\n\n  'build policy': () => {\n    let current = [null, Node(0, 0)];\n    current = [current, Node(1, 0)];\n    current = [current, Node(1, 1)];\n    let path = fnShortestPath.buildPath(current);\n    let policy = fnShortestPath.buildPolicy(path, 3, 3);\n    let policyExp = [\n      [game.EAST, null, null],\n      [game.SOUTH, null, null],\n      [null, null, null],\n    ];\n    eq(\n      true,\n      policy.every((col, i) => col.every((v, j) => (v == null ? v == policyExp[i][j] : v.eq(policyExp[i][j])))),\n    );\n  },\n\n  search: () => {\n    let exclusions = NodeSet();\n    exclusions.addNode(Node(1, 0));\n    exclusions.addNode(Node(0, 0));\n    let path = fnShortestPath.search(Node(1, 0), Node(2, 3), 5, 5, exclusions.copy(), game.EAST);\n    let pathExp = [Node(2, 3), Node(2, 2), Node(2, 1), Node(2, 0), Node(1, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n\n    // Change initial direction\n    path = fnShortestPath.search(Node(1, 0), Node(2, 3), 5, 5, exclusions.copy(), game.SOUTH);\n    pathExp = [Node(2, 3), Node(1, 3), Node(1, 2), Node(1, 1), Node(1, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n\n    // Wall\n    exclusions.addNode(Node(1, 1));\n    path = fnShortestPath.search(Node(1, 0), Node(2, 3), 5, 5, exclusions.copy(), game.SOUTH);\n    pathExp = [Node(2, 3), Node(2, 2), Node(2, 1), Node(2, 0), Node(1, 0)];\n    eq(\n      true,\n      path.every((n, i) => path[i].eq(pathExp[i])),\n    );\n  },\n};\n"],"names":[],"version":3,"file":"test.1a17f13e.js.map"}