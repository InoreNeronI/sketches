{"mappings":"ACuCA,MAAM,EAAW,CACf,IAAK,SAAU,CAAK,EAClB,IAAI,EAAW,EACf,IAAK,IAAI,KAAY,EAAO,CAC1B,IAAI,EAAa,CAAK,CAAC,EAAS,CAChC,GAAI,CACF,IACA,QAAQ,GAAG,CAAC,QAAS,EAAU,KACjC,CAAE,MAAO,EAAG,CACV,IACA,QAAQ,KAAK,CAAC,QAAS,EAAU,SAAU,GAC3C,QAAQ,KAAK,CAAC,EAAE,KAAK,CACvB,CACF,CACA,WAAW,WAEL,OAAO,QAAQ,EAAI,SAAS,IAAI,EAClC,CAAA,SAAS,IAAI,CAAC,KAAK,CAAC,eAAe,CAAG,AAAY,GAAZ,EAAgB,UAAY,SADpE,CAGF,EAAG,EACL,EAEA,KAAM,SAAU,CAAG,EACjB,MAAM,AAAI,MAAM,WAAa,EAC/B,EAEA,OAAQ,SAAU,CAAK,CAAE,CAAG,EAC1B,GAAI,CAAC,EACH,MAAM,AAAI,MAAM,aAAe,EAEnC,EAEA,aAAc,SAAU,CAAQ,CAAE,CAAM,EACtC,GAAI,GAAY,EACd,MAAM,AAAI,MAAM,mBAAqB,EAAW,SAAW,EAAS,IAExE,EAEA,mBAAoB,SAAU,CAAQ,CAAE,CAAM,EAC5C,GAAI,IAAa,EACf,MAAM,AAAI,MAAM,yBAA2B,EAAW,UAAY,EAAS,IAE/E,CACF,CAEa,CAAA,EAAS,IAAI,CACf,EAAS,MAAM,CACT,EAAS,YAAY,CAC/B,EAAS,YAAY,CACL,EAAS,kBAAkB,CACxC,EAAS,GAAG","sources":["<anon>","src/snake-pro/tests/tinytest.js"],"sourcesContent":["/**\n * Very simple in-browser unit-test library, with zero deps.\n *\n * Background turns green if all tests pass, otherwise red.\n * View the JavaScript console to see failure reasons.\n *\n * Example:\n *\n *   adder.js (code under test)\n *\n *     function add(a, b) {\n *       return a + b;\n *     }\n *\n *   adder-test.html (tests - just open a browser to see results)\n *\n *     <script src=\"tinytest.js\"></script>\n *     <script src=\"adder.js\"></script>\n *     <script>\n *\n *     tests({\n *\n *       'adds numbers': function() {\n *         eq(6, add(2, 4));\n *         eq(6.6, add(2.6, 4));\n *       },\n *\n *       'subtracts numbers': function() {\n *         eq(-2, add(2, -4));\n *       },\n *\n *     });\n *     </script>\n *\n * That's it. Stop using overcomplicated frameworks that get in your way.\n *\n * -Joe Walnes\n * MIT License. See https://github.com/joewalnes/jstinytest/\n */ const TinyTest = {\n    run: function(tests) {\n        let failures = 0;\n        for(let testName in tests){\n            let testAction = tests[testName];\n            try {\n                testAction();\n                console.log(\"Test:\", testName, \"OK\");\n            } catch (e) {\n                failures++;\n                console.error(\"Test:\", testName, \"FAILED\", e);\n                console.error(e.stack);\n            }\n        }\n        setTimeout(function() {\n            // Give document a chance to complete\n            if (window.document && document.body) document.body.style.backgroundColor = failures == 0 ? \"#99ff99\" : \"#ff9999\";\n        }, 0);\n    },\n    fail: function(msg) {\n        throw new Error(\"fail(): \" + msg);\n    },\n    assert: function(value, msg) {\n        if (!value) throw new Error(\"assert(): \" + msg);\n    },\n    assertEquals: function(expected, actual) {\n        if (expected != actual) throw new Error('assertEquals() \"' + expected + '\" != \"' + actual + '\"');\n    },\n    assertStrictEquals: function(expected, actual) {\n        if (expected !== actual) throw new Error('assertStrictEquals() \"' + expected + '\" !== \"' + actual + '\"');\n    }\n};\nconst fail = TinyTest.fail, assert = TinyTest.assert, assertEquals = TinyTest.assertEquals, eq = TinyTest.assertEquals, assertStrictEquals = TinyTest.assertStrictEquals, tests = TinyTest.run;\n\n//# sourceMappingURL=test.c56b3be8.js.map\n","/**\n * Very simple in-browser unit-test library, with zero deps.\n *\n * Background turns green if all tests pass, otherwise red.\n * View the JavaScript console to see failure reasons.\n *\n * Example:\n *\n *   adder.js (code under test)\n *\n *     function add(a, b) {\n *       return a + b;\n *     }\n *\n *   adder-test.html (tests - just open a browser to see results)\n *\n *     <script src=\"tinytest.js\"></script>\n *     <script src=\"adder.js\"></script>\n *     <script>\n *\n *     tests({\n *\n *       'adds numbers': function() {\n *         eq(6, add(2, 4));\n *         eq(6.6, add(2.6, 4));\n *       },\n *\n *       'subtracts numbers': function() {\n *         eq(-2, add(2, -4));\n *       },\n *\n *     });\n *     </script>\n *\n * That's it. Stop using overcomplicated frameworks that get in your way.\n *\n * -Joe Walnes\n * MIT License. See https://github.com/joewalnes/jstinytest/\n */\nconst TinyTest = {\n  run: function (tests) {\n    let failures = 0;\n    for (let testName in tests) {\n      let testAction = tests[testName];\n      try {\n        testAction();\n        console.log('Test:', testName, 'OK');\n      } catch (e) {\n        failures++;\n        console.error('Test:', testName, 'FAILED', e);\n        console.error(e.stack);\n      }\n    }\n    setTimeout(function () {\n      // Give document a chance to complete\n      if (window.document && document.body) {\n        document.body.style.backgroundColor = failures == 0 ? '#99ff99' : '#ff9999';\n      }\n    }, 0);\n  },\n\n  fail: function (msg) {\n    throw new Error('fail(): ' + msg);\n  },\n\n  assert: function (value, msg) {\n    if (!value) {\n      throw new Error('assert(): ' + msg);\n    }\n  },\n\n  assertEquals: function (expected, actual) {\n    if (expected != actual) {\n      throw new Error('assertEquals() \"' + expected + '\" != \"' + actual + '\"');\n    }\n  },\n\n  assertStrictEquals: function (expected, actual) {\n    if (expected !== actual) {\n      throw new Error('assertStrictEquals() \"' + expected + '\" !== \"' + actual + '\"');\n    }\n  },\n};\n\nconst fail = TinyTest.fail,\n  assert = TinyTest.assert,\n  assertEquals = TinyTest.assertEquals,\n  eq = TinyTest.assertEquals, // alias for assertEquals\n  assertStrictEquals = TinyTest.assertStrictEquals,\n  tests = TinyTest.run;\n"],"names":["TinyTest","run","tests","failures","testName","testAction","console","log","e","error","stack","setTimeout","window","document","body","style","backgroundColor","fail","msg","Error","assert","value","assertEquals","expected","actual","assertStrictEquals"],"version":3,"file":"test.c56b3be8.js.map"}