{"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCC,GACD,MAAM,WAAW;IACf,KAAK,SAAU,KAAK;QAClB,IAAI,WAAW;QACf,IAAK,IAAI,YAAY,MAAO;YAC1B,IAAI,aAAa,KAAK,CAAC,SAAS;YAChC,IAAI;gBACF;gBACA,QAAQ,GAAG,CAAC,SAAS,UAAU;YACjC,EAAE,OAAO,GAAG;gBACV;gBACA,QAAQ,KAAK,CAAC,SAAS,UAAU,UAAU;gBAC3C,QAAQ,KAAK,CAAC,EAAE,KAAK;YACvB;QACF;QACA,WAAW;YACT,qCAAqC;YACrC,IAAI,OAAO,QAAQ,IAAI,SAAS,IAAI,EAClC,SAAS,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,YAAY,IAAI,YAAY;QAEtE,GAAG;IACL;IAEA,MAAM,SAAU,GAAG;QACjB,MAAM,IAAI,MAAM,aAAa;IAC/B;IAEA,QAAQ,SAAU,KAAK,EAAE,GAAG;QAC1B,IAAI,CAAC,OACH,MAAM,IAAI,MAAM,eAAe;IAEnC;IAEA,cAAc,SAAU,QAAQ,EAAE,MAAM;QACtC,IAAI,YAAY,QACd,MAAM,IAAI,MAAM,qBAAqB,WAAW,WAAW,SAAS;IAExE;IAEA,oBAAoB,SAAU,QAAQ,EAAE,MAAM;QAC5C,IAAI,aAAa,QACf,MAAM,IAAI,MAAM,2BAA2B,WAAW,YAAY,SAAS;IAE/E;AACF;AAEA,MAAM,OAAO,SAAS,IAAI,EACxB,SAAS,SAAS,MAAM,EACxB,eAAe,SAAS,YAAY,EACpC,KAAK,SAAS,YAAY,EAC1B,qBAAqB,SAAS,kBAAkB,EAChD,QAAQ,SAAS,GAAG","sources":["src/snake-pro/tests/tinytest.js"],"sourcesContent":["/**\n * Very simple in-browser unit-test library, with zero deps.\n *\n * Background turns green if all tests pass, otherwise red.\n * View the JavaScript console to see failure reasons.\n *\n * Example:\n *\n *   adder.js (code under test)\n *\n *     function add(a, b) {\n *       return a + b;\n *     }\n *\n *   adder-test.html (tests - just open a browser to see results)\n *\n *     <script src=\"tinytest.js\"></script>\n *     <script src=\"adder.js\"></script>\n *     <script>\n *\n *     tests({\n *\n *       'adds numbers': function() {\n *         eq(6, add(2, 4));\n *         eq(6.6, add(2.6, 4));\n *       },\n *\n *       'subtracts numbers': function() {\n *         eq(-2, add(2, -4));\n *       },\n *\n *     });\n *     </script>\n *\n * That's it. Stop using overcomplicated frameworks that get in your way.\n *\n * -Joe Walnes\n * MIT License. See https://github.com/joewalnes/jstinytest/\n */\nconst TinyTest = {\n  run: function (tests) {\n    let failures = 0;\n    for (let testName in tests) {\n      let testAction = tests[testName];\n      try {\n        testAction();\n        console.log('Test:', testName, 'OK');\n      } catch (e) {\n        failures++;\n        console.error('Test:', testName, 'FAILED', e);\n        console.error(e.stack);\n      }\n    }\n    setTimeout(function () {\n      // Give document a chance to complete\n      if (window.document && document.body) {\n        document.body.style.backgroundColor = failures == 0 ? '#99ff99' : '#ff9999';\n      }\n    }, 0);\n  },\n\n  fail: function (msg) {\n    throw new Error('fail(): ' + msg);\n  },\n\n  assert: function (value, msg) {\n    if (!value) {\n      throw new Error('assert(): ' + msg);\n    }\n  },\n\n  assertEquals: function (expected, actual) {\n    if (expected != actual) {\n      throw new Error('assertEquals() \"' + expected + '\" != \"' + actual + '\"');\n    }\n  },\n\n  assertStrictEquals: function (expected, actual) {\n    if (expected !== actual) {\n      throw new Error('assertStrictEquals() \"' + expected + '\" !== \"' + actual + '\"');\n    }\n  },\n};\n\nconst fail = TinyTest.fail,\n  assert = TinyTest.assert,\n  assertEquals = TinyTest.assertEquals,\n  eq = TinyTest.assertEquals, // alias for assertEquals\n  assertStrictEquals = TinyTest.assertStrictEquals,\n  tests = TinyTest.run;\n"],"names":[],"version":3,"file":"test.12f1a1eb.js.map"}