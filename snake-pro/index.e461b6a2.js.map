{"mappings":"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","sources":["src/snake-pro/src/sketch.js"],"sourcesContent":["const sketch = (p) => {\n  FRAMERATE_MAX = 60;\n  FRAMERATE_MIN = 1;\n  FRAMERATE_STEP = 1;\n  FRAMERATE_INITIAL = FRAMERATE_MAX;\n\n  SIZE_MAX = 25;\n  SIZE_MIN = 2;\n  SIZE_STEP = 1;\n  SIZE_INITIAL = 10;\n  SIZE_INITIAL_HAMILTONIAN = 4;\n  SIZE_MAX_HAMILTONIAN = 6;\n\n  // Pre-allocate DOM component vars, cant be initialized until setup() is called\n  let canvas = null;\n  const initCanvas = () => {\n    canvas = p.createCanvas(600, 600);\n    canvas.parent('#canvas');\n  };\n\n  /**\n   * Score Elements\n   */\n  let score = 0;\n  let scoreCounter = null;\n  const initScoreCounter = () => {\n    scoreCounter = p.createSpan(`${score}`);\n    scoreCounter.parent('#scoreCount');\n  };\n  const calcScore = (state) => state.snake.length - 2;\n  const updateScore = (s) => {\n    score = s;\n    scoreCounter.html(score);\n  };\n\n  let scores = [];\n  let scoreMean = null;\n  let scoreMedian = null;\n  let scoreMin = null;\n  let scoreMax = null;\n  let gameCount = null;\n  const initScoreStats = () => {\n    gameCount = p.createSpan('0');\n    gameCount.parent('#gameCount');\n    scoreMean = p.createSpan('0');\n    scoreMean.parent('#scoreMean');\n    scoreMedian = p.createSpan('0');\n    scoreMedian.parent('#scoreMedian');\n    scoreMin = p.createSpan('0');\n    scoreMin.parent('#scoreMin');\n    scoreMax = p.createSpan('0');\n    scoreMax.parent('#scoreMax');\n  };\n  const updateScoreStats = (score) => {\n    if (score >= 0) scores.push(score);\n    scores.sort((a, b) => a - b);\n    const sum = scores.reduce((acc, v) => acc + v, 0);\n    const mid = Math.floor(scores.length / 2);\n    gameCount.html(scores.length);\n    scoreMean.html(scores.length > 0 ? (sum / scores.length).toFixed(2) : 0);\n    scoreMedian.html(scores.length > 0 ? scores[mid] : 0);\n    scoreMin.html(scores.length > 0 ? scores[0] : 0);\n    scoreMax.html(scores.length > 0 ? scores[scores.length - 1] : 0);\n  };\n\n  /**\n   * Player Selection Elements\n   */\n  const HUMAN = 0;\n  const QLEARN = 1;\n  const SP = 2;\n  const HMC = 3;\n  let playerSelect = null;\n  const initPlayerSelect = () => {\n    playerSelect = p.createSelect();\n    playerSelect.parent('#playerSelect');\n    playerSelect.option('Human', HUMAN);\n    playerSelect.option('Q-Learning', QLEARN);\n    playerSelect.option('Shortest Path', SP);\n    playerSelect.option('Hamiltonian Cycle', HMC);\n    playerSelect.value(HMC);\n    playerSelect.changed(() => {\n      gameSizeSlider.remove();\n      gameSizeLabel.remove();\n      initGameSizeSlider();\n      resetGame();\n    });\n  };\n\n  /**\n   * Game Settings Elements\n   */\n  let drawArrowsCb = null;\n  let gameSizeLabel = null;\n  let gameSizeSlider = null;\n  const initGameSizeSlider = () => {\n    if (playerSelect.value() == HMC) gameSizeSlider = p.createSlider(SIZE_MIN, SIZE_MAX_HAMILTONIAN, SIZE_INITIAL_HAMILTONIAN, SIZE_STEP);\n    else gameSizeSlider = p.createSlider(SIZE_MIN, SIZE_MAX, SIZE_INITIAL, SIZE_STEP);\n    gameSizeLabel = p.createSpan(`${gameSizeSlider.value()}`);\n    gameSizeLabel.parent('#gameSizeLbl');\n    gameSizeSlider.parent('#gameSize');\n    gameSizeSlider.changed(() => {\n      gameSizeLabel.html(gameSizeSlider.value());\n      resetGame();\n    });\n  };\n\n  let drawWallsCb = null;\n  let gameSpeedLabel = null;\n  let gameSpeedSlider = null;\n  const initGameSpeedSlider = () => {\n    gameSpeedSlider = p.createSlider(FRAMERATE_MIN, FRAMERATE_MAX, FRAMERATE_INITIAL, FRAMERATE_STEP);\n    gameSpeedLabel = p.createSpan(`${gameSpeedSlider.value()}`);\n    gameSpeedLabel.parent('#gameSpeedLbl');\n    gameSpeedSlider.parent('#gameSpeed');\n    gameSpeedSlider.changed(() => {\n      if (!drawWallsCb.checked()) p.frameRate(gameSpeedSlider.value());\n      gameSpeedLabel.html(gameSpeedSlider.value());\n    });\n  };\n\n  let clearWallsBtn = null;\n  let makeWalls = false;\n  let wallsSave = NodeSet();\n  const initWallsBtns = () => {\n    drawWallsCb = p.createCheckbox(' Add/Remove Walls (pauses game)', false);\n    drawWallsCb.parent('#drawWalls');\n    drawWallsCb.changed(() => {\n      if (drawWallsCb.checked()) p.frameRate(FRAMERATE_MAX);\n      if (!drawWallsCb.checked() && playerSelect.value() == HMC) {\n        p.frameRate(gameSpeedSlider.value());\n        resetGame();\n      }\n    });\n    clearWallsBtn = p.createButton('Clear Walls');\n    clearWallsBtn.parent('#drawWalls');\n    clearWallsBtn.mousePressed(clearWalls);\n  };\n  const clearWalls = () => {\n    wallsSave = NodeSet();\n    state.walls = wallsSave;\n    if (playerSelect.value() == HMC) resetGame();\n  };\n\n  /**\n   * Game State\n   */\n  const nX = () => 2 * gameSizeSlider.value();\n  const nY = () => 2 * gameSizeSlider.value();\n  const toX = (i) => Math.floor((i * p.width) / nX());\n  const toY = (i) => Math.floor((i * p.height) / nY());\n  const fromX = (x) => Math.floor((x * nX()) / p.width);\n  const fromY = (y) => Math.floor((y * nY()) / p.height);\n\n  let next = null;\n  let state = null;\n  let update = null;\n  const restart = () => {\n    next = game.next(nX(), nY(), wallsSave);\n    state = next();\n    update = { direction: game.EAST };\n    qModel.reset();\n    spModel = ShortestPath();\n  };\n  const resetGame = () => {\n    scores = [];\n    updateScore(0);\n    updateScoreStats(-1);\n    hmcModel.reset();\n    restart();\n  };\n\n  // Models\n  let qModel = QLearn(100, 50, 1, 0.05, 0.01, 0.9, 0.9, 1, -1);\n  let spModel = null;\n  let hmcModel = Hamiltonian(100, 100, 1000, 10);\n\n  /**\n   * Setup\n   */\n  p.setup = () => {\n    initCanvas();\n    initGameSpeedSlider();\n    initWallsBtns();\n\n    initScoreCounter();\n    initScoreStats();\n    initPlayerSelect();\n\n    // Must be done after player select\n    initGameSizeSlider();\n\n    drawArrowsCb = p.createCheckbox(' Draw Path Arrows', true);\n    drawArrowsCb.parent('#arrows');\n    p.frameRate(gameSpeedSlider.value());\n    resetGame();\n  };\n\n  /**\n   * Draw\n   */\n  p.draw = () => {\n    p.background(240);\n\n    if (!drawWallsCb.checked()) {\n      // Update Game State\n      state = next(state, update);\n      if (state.justEaten) updateScore(calcScore(state));\n      if (!state.isAlive || state.apple == null) {\n        updateScoreStats(calcScore(state));\n        restart();\n      }\n\n      // Update Models\n      if (playerSelect.value() == QLEARN) {\n        // Update Q Learning\n        qModel.update(next, state, state.justEaten);\n        update.direction = qModel.getAction(state.snake[0]);\n        if (drawArrowsCb.checked()) p5QLearn.draw(p, toX, toY, qModel);\n      } else if (playerSelect.value() == SP) {\n        // Update Shortest Path\n        spModel.update(state, state.apple);\n        update.direction = spModel.getAction(state.snake[0]);\n        if (drawArrowsCb.checked()) p5ShortestPath.draw(p, toX, toY, spModel);\n      } else if (playerSelect.value() == HMC) {\n        // Update Hamiltonian Cycle\n        hmcModel.update(state);\n        update.direction = hmcModel.getAction(state.snake[0]);\n        if (drawArrowsCb.checked()) p5Hamiltonian.draw(p, toX, toY, hmcModel);\n      }\n    }\n\n    p5Game.draw(p, toX, toY, state);\n\n    if (playerSelect.value() == HMC && !hmcModel.isHamiltonianCycle) p5Hamiltonian.notice(p, p.width / 2, p.height / 2);\n  };\n\n  /**\n   * Key Pressed\n   */\n  p.keyPressed = () => {\n    if (playerSelect.value() == HUMAN) {\n      const direction = p5Game.processUserInput(p);\n      update.direction = direction == null ? update.direction : direction;\n    }\n  };\n\n  // Required otherwise the Draw Wall feature will add walls to locations outside of canvas\n  const mouseOverCanvas = () => {\n    return p.mouseX <= p.width && p.mouseX >= 0 && p.mouseY <= p.height && p.mouseY >= 0;\n  };\n\n  /**\n   *\n   */\n  p.mousePressed = () => {\n    if (drawWallsCb.checked() && mouseOverCanvas()) {\n      const x = fromX(p.mouseX);\n      const y = fromY(p.mouseY);\n      if (!state.walls.has(x, y)) {\n        makeWalls = true;\n        state.walls.add(x, y);\n      } else {\n        makeWalls = false;\n        state.walls.delete(x, y);\n      }\n    }\n  };\n\n  /**\n   * Mouse Dragged\n   */\n  p.mouseDragged = () => {\n    if (drawWallsCb.checked() && mouseOverCanvas()) {\n      const x = fromX(p.mouseX);\n      const y = fromY(p.mouseY);\n      if (makeWalls && !state.walls.has(x, y)) state.walls.add(x, y);\n      else if (!makeWalls && state.walls.has(x, y)) state.walls.delete(x, y);\n    }\n  };\n};\n\n/**\n * Draw and Misc UI related functions for Game\n */\nconst p5Game = {\n  draw: (p, toX, toY, state) => {\n    const snake = state.snake;\n    const apple = state.apple;\n    const walls = state.walls;\n\n    // Draw snake\n    p.stroke(0);\n    p.strokeWeight(toX(0.5));\n    p.fill(0);\n    snake.forEach((node, i) => {\n      if (i != snake.length - 1) {\n        p.line(toX(node.x + 0.5), toY(node.y + 0.5), toX(snake[i + 1].x + 0.5), toY(snake[i + 1].y + 0.5));\n      }\n    });\n    p.fill(255);\n    p.strokeWeight(2);\n    p.ellipse(toX(snake[0].x + 0.5), toY(snake[0].y + 0.5), toX(0.25), toY(0.25));\n    snake[snake.length - 1];\n    // Draw Apple\n    p.strokeWeight(2);\n    p.fill(255, 0, 0);\n    p.ellipse(toX(apple.x + 0.5), toY(apple.y + 0.5), toX(0.75), toY(0.75));\n\n    // Draw Walls\n    p.strokeWeight(2);\n    p.stroke(34, 139, 34);\n    p.fill(34, 139, 34);\n    walls.lookup.forEach((node) => {\n      p.rect(toX(node.x), toY(node.y), toX(1), toY(1));\n    });\n\n    // Draw Outer Frame\n    p.stroke(0);\n    p.noFill();\n    p.strokeWeight(5);\n    p.rect(0, 0, p.width, p.height);\n  },\n\n  processUserInput: (p) => {\n    if (p.key == 'w' || p.keyIsDown(38)) return game.NORTH;\n    else if (p.key == 's' || p.keyIsDown(40)) return game.SOUTH;\n    else if (p.key == 'd' || p.keyIsDown(39)) return game.EAST;\n    else if (p.key == 'a' || p.keyIsDown(37)) return game.WEST;\n    else return null;\n  },\n};\n\n/**\n * Draw Functions that can be shared between modules\n */\nconst p5Utils = {\n  drawArrow: (p, direction, toX, toY) => {\n    if (direction.eq(game.NORTH)) p5Utils._drawArrow(p, node, 0, -0.5, 0.15, 0, toX, toY);\n    else if (direction.eq(game.SOUTH)) p5Utils._drawArrow(p, node, 0, 0.5, 0.15, 0, toX, toY);\n    else if (direction.eq(game.EAST)) p5Utils._drawArrow(p, node, 0.5, 0, 0, 0.15, toX, toY);\n    else if (direction.eq(game.WEST)) p5Utils._drawArrow(p, node, -0.5, 0, 0, 0.15, toX, toY);\n  },\n\n  _drawArrow: (p, node, tipXMove, tipYMove, baseXMove, baseYMove, toX, toY) => {\n    let x = node.x + 0.5;\n    let y = node.y + 0.5;\n    p.triangle(toX(x + baseXMove), toY(y + baseYMove), toX(x + tipXMove), toY(y + tipYMove), toX(x - baseXMove), toY(y - baseYMove));\n  },\n};\n\n/**\n * Draw and Misc UI related functions for Shortest Path\n */\nconst p5ShortestPath = {\n  draw: (p, toX, toY, model) => {\n    p.noStroke();\n    p.fill(`rgb(0,191,255)`);\n    model.policy.map((v, i) =>\n      v.map((q, j) => {\n        if (q != null) {\n          node = Node(i, j);\n          p5Utils.drawArrow(p, model.getAction(node), toX, toY);\n        }\n      }),\n    );\n  },\n};\n\n/**\n * Draw and Misc UI related functions for Hamiltonian Cycle\n */\nconst p5Hamiltonian = {\n  draw: (p, toX, toY, model) => {\n    p.noStroke();\n    p.fill(`rgb(0,191,255)`);\n    if (model.isHamiltonianCycle) {\n      model.policy.map((v, i) =>\n        v.map((q, j) => {\n          if (q != null) {\n            node = Node(i, j);\n            p5Utils.drawArrow(p, model.getAction(node), toX, toY);\n          }\n        }),\n      );\n    } else {\n      model.spAgent.policy.map((v, i) =>\n        v.map((q, j) => {\n          if (q != null) {\n            node = Node(i, j);\n            p5Utils.drawArrow(p, model.getAction(node), toX, toY);\n          }\n        }),\n      );\n    }\n  },\n\n  notice: (p, x, y) => {\n    p.textSize(30);\n    p.stroke(255);\n    p.strokeWeight(2);\n    p.fill(0);\n    p.textAlign(p.CENTER);\n    p.text('Searching for Cycle...', x, y);\n  },\n};\n\n/**\n * Draw and Misc UI related functions for QLearn\n */\nconst p5QLearn = {\n  draw: (p, toX, toY, model) => {\n    // Get the largest value in the qTable\n    let vmax = null;\n    for (let i = 0; i < model.policy.length; i++) {\n      for (let j = 0; j < model.policy[0].length; j++) {\n        const v = model.maxQ(Node(i, j));\n        if (vmax == null || v > vmax) vmax = v;\n      }\n    }\n\n    p.noStroke();\n    model.policy.map((v, i) =>\n      v.map((q, j) => {\n        node = Node(i, j);\n        if (!model.allQEq(node)) {\n          p.fill(`rgba(0,191,255,${Math.max(0.1, p.map(model.maxQ(node), vmax / 6, vmax, 0, 1))})`);\n          p5Utils.drawArrow(p, model.getAction(node), toX, toY);\n        }\n      }),\n    );\n  },\n};\n\nlet p5Instance = new p5(sketch);\n"],"names":[],"version":3,"file":"index.e461b6a2.js.map"}