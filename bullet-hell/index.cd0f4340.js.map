{"mappings":"","sources":["src/bullet-hell/class/player.js"],"sourcesContent":["class Player extends Ship {\n  constructor(x, y) {\n    super(x, y);\n\n    // Cooldowns\n    this.invulnTime = 0;\n\n    // Display\n    this.color = '#19B5FE';\n\n    // Misc\n    this.type = 'player';\n\n    // Physics\n    this.r = PLAYER_RADIUS;\n\n    // Stats\n    this.fireRate = PLAYER_FIRE_RATE;\n    this.hp = PLAYER_HP;\n    this.speed = PLAYER_SPEED;\n    this.weapon = 'basic';\n  }\n\n  // All operations to do per tick\n  act() {\n    if (!paused) this.controls();\n    super.act();\n  }\n\n  // The attack being used when firing\n  attack() {\n    WEAPON[this.weapon](this);\n  }\n\n  // Check for keypresses\n  controls() {\n    // Fire weapon (Z key or B key)\n    if (keyIsDown(90) || keyIsDown(66)) this.fire();\n\n    // Movement (arrow keys)\n    let diag = this.speed / sqrt(2);\n    if (keyIsDown(RIGHT_ARROW) || keyIsDown(68)) {\n      if (keyIsDown(UP_ARROW) || keyIsDown(87)) {\n        this.vel = createVector(diag, -diag);\n      } else if (keyIsDown(DOWN_ARROW) || keyIsDown(83)) {\n        this.vel = createVector(diag, diag);\n      } else {\n        this.vel = createVector(this.speed, 0);\n      }\n    } else if (keyIsDown(LEFT_ARROW) || keyIsDown(65)) {\n      if (keyIsDown(UP_ARROW) || keyIsDown(87)) {\n        this.vel = createVector(-diag, -diag);\n      } else if (keyIsDown(DOWN_ARROW) || keyIsDown(83)) {\n        this.vel = createVector(-diag, diag);\n      } else {\n        this.vel = createVector(-this.speed, 0);\n      }\n    } else if (keyIsDown(DOWN_ARROW) || keyIsDown(83)) {\n      this.vel = createVector(0, this.speed);\n    } else if (keyIsDown(UP_ARROW) || keyIsDown(87)) {\n      this.vel = createVector(0, -this.speed);\n    } else {\n      this.vel.mult(0);\n    }\n  }\n\n  // Update all cooldowns\n  cooldown() {\n    super.cooldown();\n    if (this.invulnTime > 0) this.invulnTime -= dt();\n    if (this.invulnTime < 0) this.invulnTime = 0;\n  }\n\n  // Deal damage\n  damage() {\n    if (this.invulnTime > 0) return;\n    this.invulnTime = INVULN_TIME;\n    super.damage();\n  }\n\n  // Display on the canvas\n  display() {\n    this.model(true);\n\n    // Display hitbox\n    if (showHitboxes) {\n      fill(255, 63);\n      stroke(255);\n      ellipse(this.pos.x, this.pos.y, this.r, this.r);\n    }\n  }\n\n  // Heal HP up to max\n  heal(amt) {\n    if (typeof amt === 'undefined') amt = 1;\n    if (this.hp < this.maxHp) this.hp += amt;\n    if (this.hp > this.maxHp) this.hp = this.maxHp;\n  }\n\n  // Events\n  onDeath() {\n    reloadLevel();\n  }\n  onHitBottom() {\n    this.pos.y = this.mapBottom - this.r * this.edgeRadius;\n  }\n  onHitTop() {\n    this.pos.y = this.mapTop + this.r * this.edgeRadius;\n  }\n}\n"],"names":[],"version":3,"file":"index.cd0f4340.js.map"}