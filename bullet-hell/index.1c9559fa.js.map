{"mappings":"","sources":["src/bullet-hell/class/bullet.js"],"sourcesContent":["class Bullet extends Entity {\n  constructor(x, y, angle, speed, fromPlayer) {\n    super(x, y);\n\n    // Display\n    this.model = MODEL.bullet.basic;\n\n    // Misc\n    this.fromPlayer = Boolean(fromPlayer);\n    this.maxAge = -1;\n    this.type = 'bullet';\n\n    // Physics\n    this.acc = 0;\n    this.angle = angle;\n    this.angVel = 0;\n    this.gravX = 0;\n    this.gravY = 0;\n    this.maxSpeed = 10;\n    this.r = 5;\n    this.speed = speed;\n  }\n\n  // All operations to do per tick\n  act() {\n    if (!paused) this.ai();\n    super.act();\n    if (!paused) this.collideShips();\n  }\n\n  // Dynamically update behavior\n  ai() {}\n\n  // Check for collision with player or enemy ships\n  collideShips() {\n    if (this.fromPlayer) {\n      // Try to hit boss first\n      if (boss && !boss.dead && this.tryHit(boss)) return;\n\n      // If that fails, try to hit enemies\n      for (let i = 0; i < enemies.length; i++) {\n        if (!enemies[i].dead && this.tryHit(enemies[i])) return;\n      }\n    } else {\n      // Try to hit player\n      this.tryHit(pl);\n    }\n  }\n\n  // Update all cooldowns\n  cooldown() {\n    super.cooldown();\n    if (this.maxAge !== -1 && this.age >= this.maxAge) {\n      this.dead = true;\n      this.onOldAge();\n    }\n  }\n\n  // Display on the canvas\n  display() {\n    this.model();\n\n    // Display hitbox\n    if (showHitboxes) {\n      fill(255, 63);\n      stroke(255);\n      ellipse(this.pos.x, this.pos.y, this.r, this.r);\n    }\n  }\n\n  // Any dynamic initializations to do\n  init() {\n    this.grav = createVector(this.gravX, this.gravY);\n  }\n\n  // Events\n  onHit(e) {}\n  onOldAge() {}\n\n  // Attempt to hit an entity\n  tryHit(e) {\n    if (this.collide(e)) {\n      this.dead = true;\n      e.damage();\n      this.onHit(e);\n      return true;\n    }\n  }\n\n  // Update physics\n  update() {\n    // Apply gravity\n    this.vel.add(p5.Vector.mult(this.grav, dt()));\n\n    // Apply angular velocity and linear acceleration\n    this.angle += this.angVel * dt();\n    this.speed += this.acc * dt();\n\n    // Combine gravity velocity vector and other properties\n    let v = p5.Vector.fromAngle(radians(this.angle), this.speed);\n    v = v.add(this.vel);\n\n    // Constrain to maxSpeed and apply to position\n    v.setMag(constrain(v.mag(), -this.maxSpeed, this.maxSpeed) * dt());\n    this.pos.add(v);\n  }\n}\n"],"names":[],"version":3,"file":"index.1c9559fa.js.map"}