{"mappings":"AAAA,MAAM;IACJ,YAAY,CAAC,EAAE,CAAC,CAAE;QAChB,UAAU;QACV,IAAI,CAAC,KAAK,GAAG;QAEb,iBAAiB;QACjB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,MAAM,GAAG;QAEd,OAAO;QACP,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI,GAAG;QAEZ,UAAU;QACV,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG;QAC3B,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,CAAC,GAAG;IACX;IAEA,gCAAgC;IAChC,MAAM;QACJ,IAAI,CAAC,QAAQ;YACX,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,OAAO;QACd;QACA,IAAI,CAAC,OAAO;IACd;IAEA,+BAA+B;IAC/B,QAAQ,CAAC,EAAE;QACT,OAAO,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACzD;IAEA,kBAAkB;IAClB,UAAU;QACR,sBAAsB;QACtB,IAAI,IAAI,CAAC,UAAU,IAAI;YACrB,IAAI,CAAC,IAAI,GAAG;YACZ;QACF;QAEA,8BAA8B;QAC9B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU;QAChC,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS;QACxC,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU;QAC1C,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ;QACtC,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW;IAC9C;IAEA,iDAAiD;IACjD,QAAQ,CAAC,EAAE;QACT,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAC5C;IAEA,mBAAmB;IACnB,WAAW;QACT,IAAI,CAAC,GAAG,IAAI;IACd;IAEA,wBAAwB;IACxB,UAAU,CAAC;IAEX,mCAAmC;IACnC,OAAO,CAAC;IAER,mBAAmB;IACnB,QAAQ,CAAC;IAET,SAAS;IACT,UAAU,CAAC;IACX,cAAc,CAAC;IACf,YAAY,CAAC;IACb,aAAa,CAAC;IACd,WAAW,CAAC;IAEZ,iCAAiC;IACjC,aAAa;QACX,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG;QACjB,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS;IACvG;IAEA,iBAAiB;IACjB,SAAS;QACP,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;IACxC;AACF","sources":["src/bullet-hell/class/entity.js"],"sourcesContent":["class Entity {\n  constructor(x, y) {\n    // Display\n    this.color = '#ECF0F1';\n\n    // Map boundaries\n    this.edgeRadius = 1;\n    this.mapBottom = MAP_HEIGHT;\n    this.mapLeft = 0;\n    this.mapRight = width;\n    this.mapTop = 0;\n\n    // Misc\n    this.age = 0;\n    this.dead = false;\n    this.type = 'entity';\n\n    // Physics\n    this.pos = createVector(x, y);\n    this.vel = createVector();\n    this.r = 0;\n  }\n\n  // All operations to do per tick\n  act() {\n    if (!paused) {\n      this.cooldown();\n      this.update();\n      this.borders();\n    }\n    this.display();\n  }\n\n  // Find angle to another entity\n  angleTo(e) {\n    return atan2(e.pos.y - this.pos.y, e.pos.x - this.pos.x);\n  }\n\n  // Border behavior\n  borders() {\n    // Kill if outside map\n    if (this.outsideMap()) {\n      this.dead = true;\n      return;\n    }\n\n    // Behavior when hitting walls\n    let x = this.pos.x;\n    let y = this.pos.y;\n    let r = this.r * this.edgeRadius;\n    if (x - r < this.mapLeft) this.onHitLeft();\n    if (x + r > this.mapRight) this.onHitRight();\n    if (y - r < this.mapTop) this.onHitTop();\n    if (y + r > this.mapBottom) this.onHitBottom();\n  }\n\n  // Check for hitbox collision with another entity\n  collide(e) {\n    return this.pos.dist(e.pos) < this.r + e.r;\n  }\n\n  // Update cooldowns\n  cooldown() {\n    this.age += dt();\n  }\n\n  // Display on the canvas\n  display() {}\n\n  // Any dynamic initialization to do\n  init() {}\n\n  // Drawing function\n  model() {}\n\n  // Events\n  onDeath() {}\n  onHitBottom() {}\n  onHitLeft() {}\n  onHitRight() {}\n  onHitTop() {}\n\n  // Check if entity is outside map\n  outsideMap() {\n    let x = this.pos.x;\n    let y = this.pos.y;\n    let r = this.r * 2;\n    return x + r < this.mapLeft || x - r > this.mapRight || y + r < this.mapTop || y - r > this.mapBottom;\n  }\n\n  // Update physics\n  update() {\n    this.pos.add(p5.Vector.mult(this.vel, dt()));\n  }\n}\n"],"names":[],"version":3,"file":"index.44b0175f.js.map"}