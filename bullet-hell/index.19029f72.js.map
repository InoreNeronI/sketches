{"mappings":"AC+We,SAAS,aAAa,CAAC","sources":["<anon>","src/bullet-hell/index.js"],"sourcesContent":["// Config\nconst BOMB_COUNT = 2;\nconst BOMB_FLASH_DURATION = 5;\nconst BOMBS_PER_LEVEL = 1;\nconst BOSS_GRACE_PERIOD = 120;\nconst BOSS_SPAWN_DELAY = 120;\nconst INVULN_TIME = 20;\nlet MAP_HEIGHT = 650;\nconst MODEL_LINE_ALPHA = 127;\nconst NUM_STARS = 300;\nconst PLAYER_FIRE_RATE = 8;\nconst PLAYER_HP = 7;\nconst PLAYER_RADIUS = 6;\nconst PLAYER_SPEED = 4;\nconst SCORE_UPDATE_SPEED = 4;\nconst SLOWDOWN_ALPHA = 95;\nconst SLOWDOWN_ALPHA_FULL = 127;\nconst SLOWDOWN_DT = 0.4;\nconst SLOWDOWN_DURATION = 120;\nconst SLOWDOWN_WAIT_NEXT = 600;\nconst SPAWN_GRACE_PERIOD = 60;\nconst STARFIELD_LERP = 0.2;\nconst STARFIELD_SPEED = 10;\nconst UI_PANEL_HEIGHT = 100;\nconst WORLD_CEILING = -50;\n// Background\nlet starfield;\n// Cooldowns\nlet bossTime;\nlet flashTime;\nlet nextSlowdownTime;\nlet slowTime;\nlet spawnTime;\n// Debug measurements\nlet avgFPS = 0;\nlet numFPS = 0;\n// Debug mode\nlet blackStarfield = false;\nlet lowGraphics = false;\nlet showFPS = false;\nlet showHitboxes = false;\nlet showStars = true;\n// Entities\nlet boss;\nlet bullets;\nlet enemies;\nlet items;\nlet pl;\nlet ps;\nlet walls;\n// Game state\nlet curLevel;\nlet level;\nlet levelScore;\nlet paused = false;\nlet score;\nlet scoreMult;\nlet scoreToAdd;\nlet toSpawn;\nlet toSpawnBoss;\n// Powerups\nlet bombs;\n// Add a score\nfunction addScore(points) {\n    scoreToAdd += points;\n    setScoreStyle(\"#F1C40F\", \"bold\");\n}\n// Display a health bar for a boss\nfunction bossHealthBar() {\n    let h = boss.hp / boss.maxHp;\n    if (h === 0) return;\n    let c = color(215, 60, 44, 191);\n    fill(c);\n    noStroke();\n    rectMode(CENTER);\n    rect(width / 2 - 0.5, 10, h * (width - 200), 10);\n}\n// Calculate FPS and update sidebar\nfunction calculateFPS() {\n    let f = frameRate();\n    avgFPS += (f - avgFPS) / ++numFPS;\n    document.getElementById(\"fps\").innerHTML = \"FPS: \" + round(f);\n    document.getElementById(\"avgfps\").innerHTML = \"Avg. FPS: \" + avgFPS.toFixed(1);\n}\n// Clear all entities (except player)\nfunction clearEntities() {\n    boss = null;\n    bullets = [];\n    enemies = [];\n    items = [];\n    ps = [];\n    walls = [];\n}\n// Update all cooldowns\nfunction cooldown() {\n    if (flashTime > 0) flashTime--;\n    if (!paused) {\n        if (bossTime > 0) {\n            bossTime -= dt();\n            if (bossTime <= 0) spawnBoss();\n        }\n        if (nextSlowdownTime > 0 && slowTime === 0) nextSlowdownTime -= dt();\n        if (nextSlowdownTime < 0) nextSlowdownTime = 0;\n        if (slowTime > 0) slowTime -= dt();\n        if (slowTime < 0) slowTime = 0;\n        if (spawnTime > 0) spawnTime -= dt();\n        if (spawnTime < 0) spawnTime = 0;\n        if (toSpawnBoss && enemies.length === 0) {\n            toSpawnBoss = false;\n            bossTime = BOSS_SPAWN_DELAY;\n        }\n    }\n}\n// Return current dt\nfunction dt() {\n    if (paused) return 0;\n    else if (slowTime > 0) return SLOWDOWN_DT;\n    return 1;\n}\n// Draw bomb\nfunction drawBomb(x, y) {\n    fill(\"#007C21\");\n    stroke(0, MODEL_LINE_ALPHA);\n    rectMode(CORNER);\n    rect(x, y, 20, 20);\n}\n// Draw heart\nfunction drawHeart(x, y, empty) {\n    fill(empty ? 0 : \"#D73C2C\");\n    stroke(0, MODEL_LINE_ALPHA);\n    rectMode(CORNER);\n    rect(x, y, 20, 20);\n}\n// Load a level\nfunction loadLevel() {\n    if (LEVEL[level + 1]) {\n        level++;\n        curLevel = LEVEL[level];\n        toSpawn = curLevel.spawnCount;\n        // Reset cooldowns\n        spawnTime = BOSS_GRACE_PERIOD;\n        // Reset powerups\n        bombs += BOMBS_PER_LEVEL;\n        // Save score\n        levelScore = score + scoreToAdd;\n    }\n}\n// Respawn everything for current level\nfunction reloadLevel() {\n    curLevel = LEVEL[level];\n    toSpawn = curLevel.spawnCount;\n    toSpawnBoss = false;\n    // Clear all entities\n    clearEntities();\n    spawnPlayer();\n    // Reset cooldowns\n    bossTime = 0;\n    flashTime = 0;\n    nextSlowdownTime = 0;\n    slowTime = 0;\n    spawnTime = SPAWN_GRACE_PERIOD;\n    // Reset powerups\n    bombs = BOMB_COUNT;\n    slowdownReady = true;\n    // Reset score\n    score = levelScore;\n    scoreToAdd = 0;\n}\n// Reset game to first level\nfunction resetGame() {\n    // Game state\n    level = 0;\n    levelScore = 0;\n    score = 0;\n    scoreMult = 1;\n    scoreToAdd = 0;\n    reloadLevel();\n}\n// Set score text style\nfunction setScoreStyle(color1, weight) {\n    let s = document.getElementById(\"score\").style;\n    s.color = color1;\n    s.fontWeight = weight;\n}\n// Spawn a boss\nfunction spawnBoss() {\n    if (curLevel.boss) {\n        boss = new Boss(width / 2, WORLD_CEILING);\n        applyTemplate(boss, BOSS[curLevel.boss]);\n        boss.init();\n    } else loadLevel();\n}\n// Spawn an enemy\nfunction spawnEnemy() {\n    spawnTime = randInt(curLevel.spawnTimeMin, curLevel.spawnTimeMax);\n    let type = randWeight(curLevel.enemy, curLevel.enemyWeight);\n    let e = new Enemy(random(width), WORLD_CEILING);\n    applyTemplate(e, ENEMY[type]);\n    e.init();\n    // Determine spawn location\n    if (!e.spawnAboveMap) e.pos.y = MAP_HEIGHT - WORLD_CEILING;\n    enemies.push(e);\n}\n// Spawn an item\nfunction spawnItem(x, y) {\n    if (typeof x === \"undefined\" || typeof y === \"undefined\") {\n        x = random(width);\n        y = WORLD_CEILING;\n    }\n    let type = randWeight(curLevel.item, curLevel.itemWeight);\n    items.push(new Item(x, y, ITEM[type]));\n}\n// Spawn the player at the correct coords\nfunction spawnPlayer() {\n    pl = new Player(width / 2, MAP_HEIGHT * 3 / 4);\n    pl.init();\n}\n// Update game status on displays\nfunction status() {\n    document.getElementById(\"level\").innerHTML = \"Level: \" + (level + 1);\n    document.getElementById(\"score\").innerHTML = \"Score: \" + score;\n    document.getElementById(\"scoremult\").innerHTML = \"Multiplier: \" + scoreMult + \"x\";\n    // Debugging\n    if (showFPS) calculateFPS();\n}\n// Draw player bombs\nfunction uiBombs() {\n    for(let i = 0; i < bombs; i++)drawBomb(20 + 30 * i, height - UI_PANEL_HEIGHT + 60);\n}\n// Draw player health\nfunction uiHealth() {\n    let empty = pl.maxHp - (pl.hp - 1);\n    for(let i = pl.maxHp; i >= 0; i--)drawHeart(20 + 30 * i, height - UI_PANEL_HEIGHT + 20, --empty > 0);\n}\n// Draw the UI panel\nfunction uiPanel() {\n    // Draw grey rectangle\n    fill(48);\n    stroke(241, 196, 15);\n    rectMode(CORNER);\n    rect(0, height - UI_PANEL_HEIGHT, width, UI_PANEL_HEIGHT);\n    // Draw all UI panel elements\n    strokeWeight(2);\n    uiBombs();\n    uiHealth();\n    uiSlowdown();\n    strokeWeight(1);\n}\n// Draw indicator of slowdown recharge status\nfunction uiSlowdown() {\n    push();\n    translate(width - 50, height - 50);\n    rotate(180);\n    stroke(0, MODEL_LINE_ALPHA);\n    let loadPercent = (SLOWDOWN_WAIT_NEXT - nextSlowdownTime) / SLOWDOWN_WAIT_NEXT;\n    let angle = 360 * loadPercent;\n    // Draw blue/green portion\n    if (angle > 0) {\n        if (angle === 360) fill(55, 219, 208, SLOWDOWN_ALPHA_FULL);\n        else fill(55, 219, 208, SLOWDOWN_ALPHA);\n        arc(0, 0, 40, 40, 90, 90 + angle);\n    }\n    // Draw red portion\n    if (angle < 360) {\n        fill(231, 76, 60, SLOWDOWN_ALPHA);\n        arc(0, 0, 40, 40, 90 + angle, 90);\n    }\n    pop();\n}\n// Update the score by slowly adding\nfunction updateScore() {\n    if (scoreToAdd >= SCORE_UPDATE_SPEED) {\n        scoreToAdd -= SCORE_UPDATE_SPEED;\n        score += SCORE_UPDATE_SPEED * scoreMult;\n        if (scoreToAdd === 0) setScoreStyle(\"#ECF0F1\", \"normal\");\n    } else {\n        score += scoreToAdd * scoreMult;\n        scoreToAdd = 0;\n        setScoreStyle(\"#ECF0F1\", \"normal\");\n    }\n}\n// Use a bomb powerup\nfunction useBomb() {\n    if (bombs > 0 && !paused) {\n        bombs--;\n        bullets = [];\n        pl.invulnTime = INVULN_TIME;\n        flashTime = BOMB_FLASH_DURATION;\n    }\n}\n// Use a slowdown powerup\nfunction useSlowdown() {\n    if (nextSlowdownTime === 0 && !paused) {\n        slowdownReady = false;\n        slowTime = SLOWDOWN_DURATION;\n        nextSlowdownTime = SLOWDOWN_WAIT_NEXT;\n    }\n}\n/* Main p5.js functions */ const parent = document.querySelector(\".main\");\nfunction setup() {\n    // Ensure game can fit vertically inside screen\n    let maxSize = MAP_HEIGHT + UI_PANEL_HEIGHT + 2;\n    let h = parent.offsetHeight > maxSize ? maxSize : parent.offsetHeight;\n    MAP_HEIGHT = h - UI_PANEL_HEIGHT - 2;\n    let c = createCanvas(600, h - 2);\n    c.parent(\"BulletHell\");\n    // Configure p5.js\n    angleMode(DEGREES);\n    ellipseMode(RADIUS);\n    // Start background starfield\n    starfield = new Starfield(NUM_STARS, STARFIELD_SPEED);\n    // Begin level\n    resetGame();\n}\nfunction draw() {\n    // Draw the background and starfield\n    flashTime > 0 ? background(255) : background(starfield.bg);\n    starfield.display();\n    // Update game status display\n    if (!paused) updateScore();\n    status();\n    // Spawn enemies or boss\n    if (!paused && spawnTime === 0 && toSpawn > 0) {\n        toSpawn--;\n        if (toSpawn === 0) toSpawnBoss = true;\n        spawnEnemy();\n    }\n    // Update and draw all entities\n    loopOver(items);\n    loopOver(bullets);\n    if (boss) boss.act();\n    loopOver(enemies);\n    pl.act();\n    loopOver(walls);\n    loopOver(ps);\n    // Update all cooldowns\n    cooldown();\n    // Draw UI panel\n    uiPanel();\n    // Draw boss health bar\n    if (boss) bossHealthBar();\n    // Check for boss death\n    if (boss && boss.dead) {\n        boss.onDeath();\n        boss = null;\n    }\n    // Check for player death\n    if (pl.dead) pl.onDeath();\n}\nfunction keyPressed() {\n    // Use a bomb\n    if (key === \"C\" || key === \"M\") useBomb();\n    // Toggle FPS display\n    if (key === \"F\") {\n        showFPS = !showFPS;\n        document.getElementById(\"debug\").style.display = showFPS ? \"block\" : \"none\";\n        if (showFPS) {\n            avgFPS = 0;\n            numFPS = 0;\n        }\n    }\n    // Toggle low graphics settings\n    if (key === \"G\") {\n        showStars = lowGraphics;\n        lowGraphics = !lowGraphics;\n        if (lowGraphics) ps = [];\n    }\n    // Toggle hitbox display\n    if (key === \"H\") showHitboxes = !showHitboxes;\n    // Pause\n    if (key === \"P\") paused = !paused;\n    // Toggle black starfield\n    if (key === \"T\") blackStarfield = !blackStarfield;\n    // Use a slowdown\n    if (key === \"X\" || key === \"N\") useSlowdown();\n    // Toggle rendering stars\n    if (key === \"Y\") showStars = !showStars;\n}\n\n//# sourceMappingURL=index.19029f72.js.map\n","// Config\nconst BOMB_COUNT = 2;\nconst BOMB_FLASH_DURATION = 5;\nconst BOMBS_PER_LEVEL = 1;\nconst BOSS_GRACE_PERIOD = 120;\nconst BOSS_SPAWN_DELAY = 120;\nconst INVULN_TIME = 20;\nlet MAP_HEIGHT = 650;\nconst MODEL_LINE_ALPHA = 127;\nconst NUM_STARS = 300;\nconst PLAYER_FIRE_RATE = 8;\nconst PLAYER_HP = 7;\nconst PLAYER_RADIUS = 6;\nconst PLAYER_SPEED = 4;\nconst SCORE_UPDATE_SPEED = 4;\nconst SLOWDOWN_ALPHA = 95;\nconst SLOWDOWN_ALPHA_FULL = 127;\nconst SLOWDOWN_DT = 0.4;\nconst SLOWDOWN_DURATION = 120;\nconst SLOWDOWN_WAIT_NEXT = 600;\nconst SPAWN_GRACE_PERIOD = 60;\nconst STARFIELD_LERP = 0.2;\nconst STARFIELD_SPEED = 10;\nconst UI_PANEL_HEIGHT = 100;\nconst WORLD_CEILING = -50;\n\n// Background\nlet starfield;\n\n// Cooldowns\nlet bossTime;\nlet flashTime;\nlet nextSlowdownTime;\nlet slowTime;\nlet spawnTime;\n\n// Debug measurements\nlet avgFPS = 0;\nlet numFPS = 0;\n\n// Debug mode\nlet blackStarfield = false;\nlet lowGraphics = false;\nlet showFPS = false;\nlet showHitboxes = false;\nlet showStars = true;\n\n// Entities\nlet boss;\nlet bullets;\nlet enemies;\nlet items;\nlet pl;\nlet ps;\nlet walls;\n\n// Game state\nlet curLevel;\nlet level;\nlet levelScore;\nlet paused = false;\nlet score;\nlet scoreMult;\nlet scoreToAdd;\nlet toSpawn;\nlet toSpawnBoss;\n\n// Powerups\nlet bombs;\n\n// Add a score\nfunction addScore(points) {\n  scoreToAdd += points;\n  setScoreStyle('#F1C40F', 'bold');\n}\n\n// Display a health bar for a boss\nfunction bossHealthBar() {\n  let h = boss.hp / boss.maxHp;\n  if (h === 0) return;\n\n  let c = color(215, 60, 44, 191);\n  fill(c);\n  noStroke();\n  rectMode(CENTER);\n  rect(width / 2 - 0.5, 10, h * (width - 200), 10);\n}\n\n// Calculate FPS and update sidebar\nfunction calculateFPS() {\n  let f = frameRate();\n  avgFPS += (f - avgFPS) / ++numFPS;\n  document.getElementById('fps').innerHTML = 'FPS: ' + round(f);\n  document.getElementById('avgfps').innerHTML = 'Avg. FPS: ' + avgFPS.toFixed(1);\n}\n\n// Clear all entities (except player)\nfunction clearEntities() {\n  boss = null;\n  bullets = [];\n  enemies = [];\n  items = [];\n  ps = [];\n  walls = [];\n}\n\n// Update all cooldowns\nfunction cooldown() {\n  if (flashTime > 0) flashTime--;\n\n  if (!paused) {\n    if (bossTime > 0) {\n      bossTime -= dt();\n      if (bossTime <= 0) spawnBoss();\n    }\n\n    if (nextSlowdownTime > 0 && slowTime === 0) nextSlowdownTime -= dt();\n    if (nextSlowdownTime < 0) nextSlowdownTime = 0;\n\n    if (slowTime > 0) slowTime -= dt();\n    if (slowTime < 0) slowTime = 0;\n\n    if (spawnTime > 0) spawnTime -= dt();\n    if (spawnTime < 0) spawnTime = 0;\n\n    if (toSpawnBoss && enemies.length === 0) {\n      toSpawnBoss = false;\n      bossTime = BOSS_SPAWN_DELAY;\n    }\n  }\n}\n\n// Return current dt\nfunction dt() {\n  if (paused) {\n    return 0;\n  } else if (slowTime > 0) {\n    return SLOWDOWN_DT;\n  }\n  return 1;\n}\n\n// Draw bomb\nfunction drawBomb(x, y) {\n  fill('#007C21');\n  stroke(0, MODEL_LINE_ALPHA);\n  rectMode(CORNER);\n  rect(x, y, 20, 20);\n}\n\n// Draw heart\nfunction drawHeart(x, y, empty) {\n  fill(empty ? 0 : '#D73C2C');\n  stroke(0, MODEL_LINE_ALPHA);\n  rectMode(CORNER);\n  rect(x, y, 20, 20);\n}\n\n// Load a level\nfunction loadLevel() {\n  if (LEVEL[level + 1]) {\n    level++;\n    curLevel = LEVEL[level];\n    toSpawn = curLevel.spawnCount;\n\n    // Reset cooldowns\n    spawnTime = BOSS_GRACE_PERIOD;\n\n    // Reset powerups\n    bombs += BOMBS_PER_LEVEL;\n\n    // Save score\n    levelScore = score + scoreToAdd;\n  }\n}\n\n// Respawn everything for current level\nfunction reloadLevel() {\n  curLevel = LEVEL[level];\n  toSpawn = curLevel.spawnCount;\n  toSpawnBoss = false;\n\n  // Clear all entities\n  clearEntities();\n  spawnPlayer();\n\n  // Reset cooldowns\n  bossTime = 0;\n  flashTime = 0;\n  nextSlowdownTime = 0;\n  slowTime = 0;\n  spawnTime = SPAWN_GRACE_PERIOD;\n\n  // Reset powerups\n  bombs = BOMB_COUNT;\n  slowdownReady = true;\n\n  // Reset score\n  score = levelScore;\n  scoreToAdd = 0;\n}\n\n// Reset game to first level\nfunction resetGame() {\n  // Game state\n  level = 0;\n  levelScore = 0;\n  score = 0;\n  scoreMult = 1;\n  scoreToAdd = 0;\n  reloadLevel();\n}\n\n// Set score text style\nfunction setScoreStyle(color, weight) {\n  let s = document.getElementById('score').style;\n  s.color = color;\n  s.fontWeight = weight;\n}\n\n// Spawn a boss\nfunction spawnBoss() {\n  if (curLevel.boss) {\n    boss = new Boss(width / 2, WORLD_CEILING);\n    applyTemplate(boss, BOSS[curLevel.boss]);\n    boss.init();\n  } else {\n    loadLevel();\n  }\n}\n\n// Spawn an enemy\nfunction spawnEnemy() {\n  spawnTime = randInt(curLevel.spawnTimeMin, curLevel.spawnTimeMax);\n  let type = randWeight(curLevel.enemy, curLevel.enemyWeight);\n  let e = new Enemy(random(width), WORLD_CEILING);\n  applyTemplate(e, ENEMY[type]);\n  e.init();\n\n  // Determine spawn location\n  if (!e.spawnAboveMap) {\n    e.pos.y = MAP_HEIGHT - WORLD_CEILING;\n  }\n\n  enemies.push(e);\n}\n\n// Spawn an item\nfunction spawnItem(x, y) {\n  if (typeof x === 'undefined' || typeof y === 'undefined') {\n    x = random(width);\n    y = WORLD_CEILING;\n  }\n  let type = randWeight(curLevel.item, curLevel.itemWeight);\n  items.push(new Item(x, y, ITEM[type]));\n}\n\n// Spawn the player at the correct coords\nfunction spawnPlayer() {\n  pl = new Player(width / 2, (MAP_HEIGHT * 3) / 4);\n  pl.init();\n}\n\n// Update game status on displays\nfunction status() {\n  document.getElementById('level').innerHTML = 'Level: ' + (level + 1);\n  document.getElementById('score').innerHTML = 'Score: ' + score;\n  document.getElementById('scoremult').innerHTML = 'Multiplier: ' + scoreMult + 'x';\n\n  // Debugging\n  if (showFPS) calculateFPS();\n}\n\n// Draw player bombs\nfunction uiBombs() {\n  for (let i = 0; i < bombs; i++) {\n    drawBomb(20 + 30 * i, height - UI_PANEL_HEIGHT + 60);\n  }\n}\n\n// Draw player health\nfunction uiHealth() {\n  let empty = pl.maxHp - (pl.hp - 1);\n  for (let i = pl.maxHp; i >= 0; i--) {\n    drawHeart(20 + 30 * i, height - UI_PANEL_HEIGHT + 20, --empty > 0);\n  }\n}\n\n// Draw the UI panel\nfunction uiPanel() {\n  // Draw grey rectangle\n  fill(48);\n  stroke(241, 196, 15);\n  rectMode(CORNER);\n  rect(0, height - UI_PANEL_HEIGHT, width, UI_PANEL_HEIGHT);\n\n  // Draw all UI panel elements\n  strokeWeight(2);\n  uiBombs();\n  uiHealth();\n  uiSlowdown();\n  strokeWeight(1);\n}\n\n// Draw indicator of slowdown recharge status\nfunction uiSlowdown() {\n  push();\n  translate(width - 50, height - 50);\n  rotate(180);\n  stroke(0, MODEL_LINE_ALPHA);\n\n  let loadPercent = (SLOWDOWN_WAIT_NEXT - nextSlowdownTime) / SLOWDOWN_WAIT_NEXT;\n  let angle = 360 * loadPercent;\n\n  // Draw blue/green portion\n  if (angle > 0) {\n    if (angle === 360) {\n      fill(55, 219, 208, SLOWDOWN_ALPHA_FULL);\n    } else {\n      fill(55, 219, 208, SLOWDOWN_ALPHA);\n    }\n    arc(0, 0, 40, 40, 90, 90 + angle);\n  }\n\n  // Draw red portion\n  if (angle < 360) {\n    fill(231, 76, 60, SLOWDOWN_ALPHA);\n    arc(0, 0, 40, 40, 90 + angle, 90);\n  }\n\n  pop();\n}\n\n// Update the score by slowly adding\nfunction updateScore() {\n  if (scoreToAdd >= SCORE_UPDATE_SPEED) {\n    scoreToAdd -= SCORE_UPDATE_SPEED;\n    score += SCORE_UPDATE_SPEED * scoreMult;\n    if (scoreToAdd === 0) setScoreStyle('#ECF0F1', 'normal');\n  } else {\n    score += scoreToAdd * scoreMult;\n    scoreToAdd = 0;\n    setScoreStyle('#ECF0F1', 'normal');\n  }\n}\n\n// Use a bomb powerup\nfunction useBomb() {\n  if (bombs > 0 && !paused) {\n    bombs--;\n    bullets = [];\n    pl.invulnTime = INVULN_TIME;\n    flashTime = BOMB_FLASH_DURATION;\n  }\n}\n\n// Use a slowdown powerup\nfunction useSlowdown() {\n  if (nextSlowdownTime === 0 && !paused) {\n    slowdownReady = false;\n    slowTime = SLOWDOWN_DURATION;\n    nextSlowdownTime = SLOWDOWN_WAIT_NEXT;\n  }\n}\n\n/* Main p5.js functions */\n\nconst parent = document.querySelector('.main');\n\nfunction setup() {\n  // Ensure game can fit vertically inside screen\n  let maxSize = MAP_HEIGHT + UI_PANEL_HEIGHT + 2;\n  let h = parent.offsetHeight > maxSize ? maxSize : parent.offsetHeight;\n  MAP_HEIGHT = h - UI_PANEL_HEIGHT - 2;\n  let c = createCanvas(600, h - 2);\n  c.parent('BulletHell');\n\n  // Configure p5.js\n  angleMode(DEGREES);\n  ellipseMode(RADIUS);\n\n  // Start background starfield\n  starfield = new Starfield(NUM_STARS, STARFIELD_SPEED);\n\n  // Begin level\n  resetGame();\n}\n\nfunction draw() {\n  // Draw the background and starfield\n  flashTime > 0 ? background(255) : background(starfield.bg);\n  starfield.display();\n\n  // Update game status display\n  if (!paused) updateScore();\n  status();\n\n  // Spawn enemies or boss\n  if (!paused && spawnTime === 0 && toSpawn > 0) {\n    toSpawn--;\n    if (toSpawn === 0) toSpawnBoss = true;\n    spawnEnemy();\n  }\n\n  // Update and draw all entities\n  loopOver(items);\n  loopOver(bullets);\n  if (boss) boss.act();\n  loopOver(enemies);\n  pl.act();\n  loopOver(walls);\n  loopOver(ps);\n\n  // Update all cooldowns\n  cooldown();\n\n  // Draw UI panel\n  uiPanel();\n\n  // Draw boss health bar\n  if (boss) bossHealthBar();\n\n  // Check for boss death\n  if (boss && boss.dead) {\n    boss.onDeath();\n    boss = null;\n  }\n\n  // Check for player death\n  if (pl.dead) pl.onDeath();\n}\n\nfunction keyPressed() {\n  // Use a bomb\n  if (key === 'C' || key === 'M') useBomb();\n\n  // Toggle FPS display\n  if (key === 'F') {\n    showFPS = !showFPS;\n    document.getElementById('debug').style.display = showFPS ? 'block' : 'none';\n    if (showFPS) {\n      avgFPS = 0;\n      numFPS = 0;\n    }\n  }\n\n  // Toggle low graphics settings\n  if (key === 'G') {\n    showStars = lowGraphics;\n    lowGraphics = !lowGraphics;\n    if (lowGraphics) ps = [];\n  }\n\n  // Toggle hitbox display\n  if (key === 'H') showHitboxes = !showHitboxes;\n\n  // Pause\n  if (key === 'P') paused = !paused;\n\n  // Toggle black starfield\n  if (key === 'T') blackStarfield = !blackStarfield;\n\n  // Use a slowdown\n  if (key === 'X' || key === 'N') useSlowdown();\n\n  // Toggle rendering stars\n  if (key === 'Y') showStars = !showStars;\n}\n"],"names":["document","querySelector"],"version":3,"file":"index.19029f72.js.map"}