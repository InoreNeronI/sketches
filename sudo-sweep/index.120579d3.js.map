{"mappings":"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","sources":["src/sudo-sweep/Sudoku.js"],"sourcesContent":["class Sudoku {\n  constructor(x, y, w, h, font) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.size = w * h;\n\n    const grid = [...Array(this.size)].map((e) => Array(this.size));\n    const position = 0;\n    const current = round(random(1, this.size));\n\n    this.grid = this.findPath(grid, position, current);\n    this.visibility = [...Array(this.size)].map((e) => Array(this.size));\n    this.guess = [...Array(this.size)].map((e) => Array(this.size));\n    this.hint = [...Array(this.size)].map((e) => Array(this.size));\n\n    this.hide();\n    this.font = font;\n  }\n\n  findPath(grid, position, current) {\n    if (position === this.size * this.size) {\n      return grid;\n    }\n    if (this.conflict(grid, position, current)) {\n      return false;\n    }\n    const x = this.getColumn(position);\n    const y = this.getRow(position);\n    grid[x][y] = current;\n\n    position++;\n\n    let options;\n\n    if (this.size === 4) {\n      options = [1, 2, 3, 4];\n    } else if (this.size === 6) {\n      options = [1, 2, 3, 4, 5, 6];\n    } else if (this.size === 9) {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    }\n    options = shuffle(options);\n\n    for (let i = 0; i < options.length; i++) {\n      const next = options[i];\n      const test = this.findPath(grid, position, next);\n\n      if (test != false) {\n        return test;\n      }\n    }\n    grid[x][y] = '';\n    return false;\n  }\n\n  conflict(grid, position, current) {\n    const column = this.getColumn(position);\n    const row = this.getRow(position);\n    const sector = this.getSector(position);\n\n    for (let i = 0; i < this.size; i++) {\n      if (grid[column][i] === current || grid[i][row] === current) {\n        return true;\n      }\n    }\n    for (let i = 0; i < position; i++) {\n      if (sector === this.getSector(i)) {\n        const iColumn = this.getColumn(i);\n        const iRow = this.getRow(i);\n\n        if (grid[iColumn][iRow] === current) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getSector(position) {\n    let x = this.getColumn(position);\n    let y = this.getRow(position);\n    x = floor(x / this.w);\n    y = floor(y / this.h);\n\n    return y * this.h + x;\n  }\n\n  getColumn(position) {\n    return position % this.size;\n  }\n\n  getRow(position) {\n    return floor(position / this.size);\n  }\n\n  draw() {\n    push();\n    translate(this.x, this.y);\n\n    const cellSize = 60;\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const x = i * cellSize;\n        const y = j * cellSize;\n\n        fill(white);\n        stroke(mid);\n        strokeWeight(3);\n        rect(x, y, cellSize, cellSize);\n\n        fill(dark);\n        noStroke();\n        textSize(cellSize / 2);\n        textAlign(CENTER, CENTER);\n        textFont(this.font);\n\n        let number;\n\n        if (this.hint[i][j]) {\n          number = this.hint[i][j];\n          fill(dark);\n        } else {\n          number = this.guess[i][j];\n          fill(mid);\n        }\n        number -= 1; // modded for 0-3 instead of 1-this.size\n        if (number === -1) {\n          number = '';\n        }\n        text(number, x + cellSize / 2, y + cellSize / 2 + 1);\n      }\n    }\n    this.drawGuidelines(cellSize);\n    pop();\n  }\n\n  drawGuidelines(cellSize) {\n    noFill();\n    stroke(dark);\n    strokeWeight(4);\n\n    rect(0, 0, cellSize * this.size, cellSize * this.size);\n    rect(cellSize * this.w, 0, cellSize * this.w, cellSize * this.size);\n    rect(0, cellSize * this.h, cellSize * this.size, cellSize * this.h);\n  }\n\n  hide() {\n    let arr;\n\n    if (this.size === 4) {\n      arr = [0, 0, 0, -1];\n    } else if (this.size === 6) {\n      arr = [0, 0, 0, 0, 0, -1];\n    } else if (this.size === 9) {\n      arr = [0, 0, 0, 0, 0, 0, 0, 0, -1];\n    }\n    let rand = shuffle(arr);\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        this.guess[i][j] = 0;\n\n        if (this.grid[i][j] === 1 && rand[i] === 0) {\n          this.hint[i][j] = 1;\n          this.guess[i][j] = 1;\n        }\n      }\n    }\n  }\n\n  clicked(x, y) {\n    x -= this.x;\n    y -= this.y;\n\n    let cellSize = 60;\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (x > i * cellSize && x < i * cellSize + cellSize) {\n          if (y > j * cellSize && y < j * cellSize + cellSize) {\n            if (startTime === '') {\n              startTime = new Date();\n              startTime = startTime.getTime();\n            }\n\n            let max;\n\n            if (this.size === 4) {\n              max = 5;\n            } else if (this.size === 6) {\n              max = 7;\n            } else if (this.size === 9) {\n              max = 10;\n            }\n            if (!this.hint[i][j] && mouseButton === LEFT) {\n              this.guess[i][j] += 1;\n\n              if (this.guess[i][j] === max) {\n                this.guess[i][j] = 0;\n              }\n            } else if (!this.hint[i][j]) {\n              this.guess[i][j] -= 1;\n\n              if (this.guess[i][j] === -1) {\n                this.guess[i][j] = max - 1;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  validate() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.grid[i][j] != this.guess[i][j]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n"],"names":[],"version":3,"file":"index.120579d3.js.map"}