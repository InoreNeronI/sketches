{"mappings":"","sources":["src/sudo-sweep/Sudoku.js"],"sourcesContent":["class Sudoku {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.size = w * h;\n\n    const grid = [...Array(this.size)].map((e) => Array(this.size));\n    const position = 0;\n    const current = round(random(1, this.size));\n\n    this.grid = this.findPath(grid, position, current);\n    this.visibility = [...Array(this.size)].map((e) => Array(this.size));\n    this.guess = [...Array(this.size)].map((e) => Array(this.size));\n    this.hint = [...Array(this.size)].map((e) => Array(this.size));\n\n    this.hide();\n  }\n\n  findPath(grid, position, current) {\n    if (position == this.size * this.size) {\n      return grid;\n    }\n    if (this.conflict(grid, position, current)) {\n      return false;\n    }\n    const x = this.getColumn(position);\n    const y = this.getRow(position);\n    grid[x][y] = current;\n\n    position++;\n\n    let options;\n\n    if (this.size == 4) {\n      options = [1, 2, 3, 4];\n    } else if (this.size == 6) {\n      options = [1, 2, 3, 4, 5, 6];\n    } else if (this.size == 9) {\n      options = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    }\n    options = shuffle(options);\n\n    for (let i = 0; i < options.length; i++) {\n      const next = options[i];\n      const test = this.findPath(grid, position, next);\n\n      if (test != false) {\n        return test;\n      }\n    }\n    grid[x][y] = '';\n    return false;\n  }\n\n  conflict(grid, position, current) {\n    const column = this.getColumn(position);\n    const row = this.getRow(position);\n    const sector = this.getSector(position);\n\n    for (let i = 0; i < this.size; i++) {\n      if (grid[column][i] == current || grid[i][row] == current) {\n        return true;\n      }\n    }\n    for (let i = 0; i < position; i++) {\n      if (sector == this.getSector(i)) {\n        const iColumn = this.getColumn(i);\n        const iRow = this.getRow(i);\n\n        if (grid[iColumn][iRow] == current) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getSector(position) {\n    let x = this.getColumn(position);\n    let y = this.getRow(position);\n    x = floor(x / this.w);\n    y = floor(y / this.h);\n\n    return y * this.h + x;\n  }\n\n  getColumn(position) {\n    return position % this.size;\n  }\n\n  getRow(position) {\n    return floor(position / this.size);\n  }\n\n  draw() {\n    push();\n    translate(this.x, this.y);\n\n    const cellSize = 60;\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const x = i * cellSize;\n        const y = j * cellSize;\n\n        fill(white);\n        stroke(mid);\n        strokeWeight(3);\n        rect(x, y, cellSize, cellSize);\n\n        fill(dark);\n        noStroke();\n        textSize(cellSize / 2);\n        textAlign(CENTER, CENTER);\n        textFont('Fira Code');\n\n        let number;\n\n        if (this.hint[i][j]) {\n          number = this.hint[i][j];\n          fill(dark);\n        } else {\n          number = this.guess[i][j];\n          fill(mid);\n        }\n        number -= 1; // modded for 0-3 instead of 1-this.size\n        if (number == -1) {\n          number = '';\n        }\n        text(number, x + cellSize / 2, y + cellSize / 2 + 1);\n      }\n    }\n    this.drawGuidelines(cellSize);\n    pop();\n  }\n\n  drawGuidelines(cellSize) {\n    noFill();\n    stroke(dark);\n    strokeWeight(4);\n\n    rect(0, 0, cellSize * this.size, cellSize * this.size);\n    rect(cellSize * this.w, 0, cellSize * this.w, cellSize * this.size);\n    rect(0, cellSize * this.h, cellSize * this.size, cellSize * this.h);\n  }\n\n  hide() {\n    let arr;\n\n    if (this.size == 4) {\n      arr = [0, 0, 0, -1];\n    } else if (this.size == 6) {\n      arr = [0, 0, 0, 0, 0, -1];\n    } else if (this.size == 9) {\n      arr = [0, 0, 0, 0, 0, 0, 0, 0, -1];\n    }\n    let rand = shuffle(arr);\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        this.guess[i][j] = 0;\n\n        if (this.grid[i][j] == 1 && rand[i] == 0) {\n          this.hint[i][j] = 1;\n          this.guess[i][j] = 1;\n        }\n      }\n    }\n  }\n\n  clicked(x, y) {\n    x -= this.x;\n    y -= this.y;\n\n    let cellSize = 60;\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (x > i * cellSize && x < i * cellSize + cellSize) {\n          if (y > j * cellSize && y < j * cellSize + cellSize) {\n            if (startTime == '') {\n              startTime = new Date();\n              startTime = startTime.getTime();\n            }\n\n            let max;\n\n            if (this.size == 4) {\n              max = 5;\n            } else if (this.size == 6) {\n              max = 7;\n            } else if (this.size == 9) {\n              max = 10;\n            }\n            if (!this.hint[i][j] && mouseButton == LEFT) {\n              this.guess[i][j] += 1;\n\n              if (this.guess[i][j] == max) {\n                this.guess[i][j] = 0;\n              }\n            } else if (!this.hint[i][j]) {\n              this.guess[i][j] -= 1;\n\n              if (this.guess[i][j] == -1) {\n                this.guess[i][j] = max - 1;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  validate() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.grid[i][j] != this.guess[i][j]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n"],"names":[],"version":3,"file":"index.1c666803.js.map"}